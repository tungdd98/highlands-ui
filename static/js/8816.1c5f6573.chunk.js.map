{"version":3,"file":"static/js/8816.1c5f6573.chunk.js","mappings":"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","sources":["components/FormElements/FormikSelect/FormikSelect.tsx","features/banner/screens/admin/EditScreen/EditScreen.tsx"],"sourcesContent":["import React, { FC, memo } from \"react\";\n\nimport {\n  FormControl,\n  FormHelperText,\n  MenuItem,\n  Select,\n  SelectProps,\n  Typography,\n} from \"@mui/material\";\nimport { Field, useFormikContext } from \"formik\";\nimport { get } from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\n\nexport interface OptionProps {\n  value: string | number;\n  label: string;\n}\n\ninterface FormikSelectProps extends Omit<SelectProps, \"name\"> {\n  name: string;\n  options: OptionProps[];\n  ns?: string;\n}\n\nconst FormikSelect: FC<FormikSelectProps> = ({\n  fullWidth,\n  label,\n  id,\n  name,\n  displayEmpty = true,\n  variant = \"filled\",\n  options,\n  ns = \"admin\",\n  ...props\n}) => {\n  const { t } = useTranslation();\n\n  const { errors, touched, values, handleChange } = useFormikContext<unknown>();\n\n  const error = get(errors, name) && get(touched, name);\n  const errorText = get(errors, name);\n\n  return (\n    <FormControl sx={{ minWidth: 120 }} fullWidth={fullWidth}>\n      {label && (\n        <Typography sx={{ mb: 1, fontWeight: \"fontWeightMedium\" }}>\n          <label htmlFor={`label-${id || name}`}>\n            {t(`label.${label}`, { ns })}\n          </label>\n        </Typography>\n      )}\n      <Field\n        {...props}\n        label=\"\"\n        hiddenLabel\n        displayEmpty={displayEmpty}\n        labelId={`label-${id || name}`}\n        component={Select}\n        onChange={handleChange}\n        id={id || name}\n        name={name}\n        variant={variant}\n        error={!!error}\n        value={get(values, name)}\n        inputProps={{\n          name,\n        }}\n      >\n        <MenuItem value=\"\">\n          <em>{t(`${\"common.None\"}`, { ns })}</em>\n        </MenuItem>\n        {options.map(option => (\n          <MenuItem key={option.value} value={option.value}>\n            {option.label}\n          </MenuItem>\n        ))}\n      </Field>\n      {errorText && <FormHelperText error>{errorText}</FormHelperText>}\n    </FormControl>\n  );\n};\n\nexport default memo(FormikSelect);\n","import React, { FC, useEffect, useState, useMemo } from \"react\";\n\nimport { Box } from \"@mui/material\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { Formik, Form, FormikHelpers } from \"formik\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport ContentWrapper from \"components/EditComponents/ContentWrapper\";\nimport StickyHeader from \"components/EditComponents/StickyHeader\";\nimport FormikSelect from \"components/FormElements/FormikSelect/FormikSelect\";\nimport FormikTextField from \"components/FormElements/FormikTextField/FormikTextField\";\nimport Loader from \"components/Loader/Loader\";\nimport UploadImage from \"components/UploadImage/UploadImage\";\nimport { MessagesEnum } from \"constants/message.constants\";\nimport {\n  BANNER_STATUS_OPTIONS,\n  BannerPathsEnum,\n  editSchema,\n  editInitialValues,\n  convertResponseToFormData,\n  postBanner,\n  getBannerDetail,\n  putBanner,\n  BannerRequest,\n} from \"features/banner/banner\";\nimport { handleErrorResponse } from \"helpers/forms/handle-error-response\";\nimport { uploadImage } from \"helpers/forms/upload-image\";\nimport { displaySnackbar } from \"redux/snackbar.slice\";\nimport { useAppDispatch, useAppSelector } from \"redux/store\";\n\nconst EditScreen: FC = () => {\n  const history = useHistory();\n  const { bannerId } = useParams<{ bannerId: string }>();\n\n  const dispatch = useAppDispatch();\n  const { bannerDetail } = useAppSelector(state => state.banner);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const initialValues = useMemo(() => {\n    if (bannerId && bannerDetail) {\n      return convertResponseToFormData(bannerDetail);\n    }\n    return editInitialValues;\n  }, [bannerDetail, bannerId]);\n\n  const handleSubmit = async (\n    values: BannerRequest,\n    { setSubmitting }: FormikHelpers<BannerRequest>\n  ) => {\n    if (values.thumbnail instanceof File) {\n      const response = await uploadImage(values.thumbnail);\n      if (response) {\n        values.thumbnail = response;\n      }\n    }\n    const action = bannerId\n      ? dispatch(\n          putBanner({\n            data: values,\n            bannerId: Number(bannerId),\n          })\n        )\n      : dispatch(postBanner(values));\n\n    action\n      .then(unwrapResult)\n      .then(() => {\n        dispatch(\n          displaySnackbar({\n            message: bannerId\n              ? MessagesEnum.UPDATE_SUCCESS\n              : MessagesEnum.CREATE_SUCCESS,\n          })\n        );\n        history.push(BannerPathsEnum.LIST);\n      })\n      .catch(() => handleErrorResponse({ dispatch }))\n      .finally(() => setSubmitting(false));\n  };\n\n  useEffect(() => {\n    if (bannerId) {\n      dispatch(getBannerDetail(Number(bannerId))).finally(() =>\n        setIsLoading(false)\n      );\n    } else {\n      setIsLoading(false);\n    }\n  }, [dispatch, bannerId]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={editSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <StickyHeader\n            linkBack={BannerPathsEnum.LIST}\n            isSubmitting={isSubmitting}\n          />\n\n          <ContentWrapper>\n            <Box sx={{ mb: 3 }}>\n              <FormikTextField\n                name=\"title\"\n                label=\"Title\"\n                placeholder=\"example\"\n                fullWidth\n              />\n            </Box>\n\n            <UploadImage name=\"thumbnail\" label=\"Thumbnail\" />\n\n            <Box sx={{ mb: 3 }}>\n              <FormikTextField\n                name=\"link\"\n                label=\"Link\"\n                placeholder=\"Link\"\n                fullWidth\n              />\n            </Box>\n\n            <Box sx={{ mb: 3 }}>\n              <FormikSelect\n                name=\"status\"\n                label=\"Status\"\n                options={BANNER_STATUS_OPTIONS}\n                fullWidth\n              />\n            </Box>\n          </ContentWrapper>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default EditScreen;\n"],"names":["FormikSelect","fullWidth","label","id","name","displayEmpty","variant","options","ns","props","t","useTranslation","useFormikContext","errors","touched","values","handleChange","error","get","errorText","sx","minWidth","mb","fontWeight","htmlFor","hiddenLabel","labelId","component","Select","onChange","value","inputProps","map","option","memo","history","useHistory","bannerId","useParams","dispatch","useAppDispatch","bannerDetail","useAppSelector","state","banner","useState","isLoading","setIsLoading","initialValues","useMemo","convertResponseToFormData","editInitialValues","handleSubmit","setSubmitting","thumbnail","File","uploadImage","response","putBanner","data","Number","postBanner","then","unwrapResult","displaySnackbar","message","MessagesEnum","push","BannerPathsEnum","catch","handleErrorResponse","finally","useEffect","getBannerDetail","validationSchema","editSchema","onSubmit","isSubmitting","linkBack","placeholder","BANNER_STATUS_OPTIONS"],"sourceRoot":""}