{"version":3,"file":"static/js/9847.aceaae59.chunk.js","mappings":"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","sources":["components/EditComponents/ContentWrapper.tsx","components/EditComponents/StickyHeader.tsx","components/FormElements/FormikTextField/FormikTextField.tsx","constants/message.constants.ts","features/payment/screens/admin/EditScreen/EditScreen.tsx","helpers/forms/handle-error-response.ts"],"sourcesContent":["import React, { FC, memo } from \"react\";\n\nimport { Box, Paper } from \"@mui/material\";\n\ninterface ContentWrapperProps {\n  children: React.ReactNode;\n}\n\nconst ContentWrapper: FC<ContentWrapperProps> = ({ children }) => {\n  return (\n    <Box\n      component={Paper}\n      sx={theme => ({\n        maxWidth: theme.breakpoints.values.md,\n        width: \"100%\",\n        mx: \"auto\",\n        px: 3,\n        py: 3,\n        my: 5,\n      })}\n      elevation={3}\n    >\n      {children}\n    </Box>\n  );\n};\n\nexport default memo(ContentWrapper);\n","import React, { FC, memo } from \"react\";\n\nimport { Box, Paper, Button } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\ninterface StickyHeaderProps {\n  linkBack: string;\n  isSubmitting: boolean;\n}\n\nconst StickyHeader: FC<StickyHeaderProps> = ({ linkBack, isSubmitting }) => {\n  const { t } = useTranslation();\n\n  return (\n    <Box\n      component={Paper}\n      elevation={3}\n      sx={{ px: 2, position: \"sticky\", top: 0, zIndex: 9 }}\n    >\n      <Box\n        sx={theme => ({\n          maxWidth: theme.breakpoints.values.md,\n          width: \"100%\",\n          mx: \"auto\",\n          py: 1.25,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n        })}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          component={Link}\n          to={linkBack}\n        >\n          {t(\"button.Back\", { ns: \"admin\" })}\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          disabled={isSubmitting}\n        >\n          {t(\"button.Save changes\", { ns: \"admin\" })}\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default memo(StickyHeader);\n","import React, { FC, memo } from \"react\";\n\nimport { TextField, TextFieldProps, Typography } from \"@mui/material\";\nimport { Field, useFormikContext } from \"formik\";\nimport { get } from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface FormikTextFieldProps extends Omit<TextFieldProps, \"name\"> {\n  name: string;\n  ns?: string;\n}\n\nconst FormikTextField: FC<FormikTextFieldProps> = ({\n  label,\n  id,\n  name,\n  variant = \"filled\",\n  ns = \"admin\",\n  placeholder,\n  ...props\n}) => {\n  const { t } = useTranslation();\n\n  const { errors, touched, values, handleBlur, handleChange } =\n    useFormikContext<unknown>();\n\n  const error = get(errors, name) && get(touched, name);\n  const errorText = get(errors, name);\n\n  return (\n    <>\n      {label && (\n        <Typography sx={{ mb: 1, fontWeight: \"fontWeightMedium\" }}>\n          <label htmlFor={id || name}>{t(`label.${label}`, { ns })}</label>\n        </Typography>\n      )}\n      <Field\n        {...props}\n        component={TextField}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        id={id || name}\n        name={name}\n        variant={variant}\n        error={!!error}\n        helperText={error && t(errorText, { ns })}\n        value={get(values, name)}\n        autoComplete=\"off\"\n        hiddenLabel\n        label=\"\"\n        placeholder={placeholder ? t(`placeholder.${placeholder}`, { ns }) : \"\"}\n      />\n    </>\n  );\n};\n\nexport default memo(FormikTextField);\n","export enum MessagesEnum {\n  CREATE_SUCCESS = \"Created success\",\n  DELETE_SUCCESS = \"Deleted success\",\n  UPDATE_SUCCESS = \"Updated success\",\n  ERROR = \"Something error\",\n  ADD_PRODUCT_SUCCESS = \"Add product success\",\n  OVER_PRODUCT_IN_CART = \"Over product\",\n}\n","import React, { FC, useEffect, useState, useMemo } from \"react\";\n\nimport { Box } from \"@mui/material\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { Formik, Form, FormikHelpers } from \"formik\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport ContentWrapper from \"components/EditComponents/ContentWrapper\";\nimport StickyHeader from \"components/EditComponents/StickyHeader\";\nimport FormikTextField from \"components/FormElements/FormikTextField/FormikTextField\";\nimport Loader from \"components/Loader/Loader\";\nimport { MessagesEnum } from \"constants/message.constants\";\nimport {\n  PaymentPathsEnum,\n  editSchema,\n  editInitialValues,\n  convertResponseToFormData,\n  postPayment,\n  getPaymentDetail,\n  putPayment,\n  PaymentRequest,\n} from \"features/payment/payment\";\nimport { handleErrorResponse } from \"helpers/forms/handle-error-response\";\nimport { displaySnackbar } from \"redux/snackbar.slice\";\nimport { useAppDispatch, useAppSelector } from \"redux/store\";\n\nconst EditScreen: FC = () => {\n  const history = useHistory();\n  const { paymentId } = useParams<{ paymentId: string }>();\n\n  const dispatch = useAppDispatch();\n\n  const { paymentDetail } = useAppSelector(state => state.payment);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const initialValues = useMemo(() => {\n    if (paymentId && paymentDetail) {\n      return convertResponseToFormData(paymentDetail);\n    }\n    return editInitialValues;\n  }, [paymentDetail, paymentId]);\n\n  const handleSubmit = (\n    values: PaymentRequest,\n    { setSubmitting }: FormikHelpers<PaymentRequest>\n  ) => {\n    const action = paymentId\n      ? dispatch(\n          putPayment({\n            data: values,\n            paymentId: Number(paymentId),\n          })\n        )\n      : dispatch(postPayment(values));\n\n    action\n      .then(unwrapResult)\n      .then(() => {\n        dispatch(\n          displaySnackbar({\n            message: paymentId\n              ? MessagesEnum.UPDATE_SUCCESS\n              : MessagesEnum.CREATE_SUCCESS,\n          })\n        );\n        history.push(PaymentPathsEnum.LIST);\n      })\n      .catch(() => handleErrorResponse({ dispatch }))\n      .finally(() => setSubmitting(false));\n  };\n\n  useEffect(() => {\n    if (paymentId) {\n      dispatch(getPaymentDetail(Number(paymentId))).finally(() =>\n        setIsLoading(false)\n      );\n    } else {\n      setIsLoading(false);\n    }\n  }, [dispatch, paymentId]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={editSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <StickyHeader\n            linkBack={PaymentPathsEnum.LIST}\n            isSubmitting={isSubmitting}\n          />\n\n          <ContentWrapper>\n            <Box mb={3}>\n              <FormikTextField\n                name=\"title\"\n                label=\"Title\"\n                placeholder=\"example\"\n                fullWidth\n              />\n            </Box>\n\n            <FormikTextField\n              name=\"description\"\n              label=\"Description\"\n              placeholder=\"example\"\n              multiline\n              fullWidth\n              rows={5}\n            />\n          </ContentWrapper>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default EditScreen;\n","import { MessagesEnum } from \"constants/message.constants\";\nimport { displaySnackbar } from \"redux/snackbar.slice\";\nimport { AppDispatch } from \"redux/store\";\n\nexport const handleErrorResponse = ({\n  dispatch,\n}: {\n  dispatch: AppDispatch;\n}) => {\n  dispatch(\n    displaySnackbar({\n      message: MessagesEnum.ERROR,\n    })\n  );\n};\n"],"names":["ContentWrapper","children","component","Paper","sx","theme","maxWidth","breakpoints","values","md","width","mx","px","py","my","elevation","memo","StickyHeader","linkBack","isSubmitting","t","useTranslation","position","top","zIndex","display","justifyContent","variant","color","Link","to","ns","type","disabled","FormikTextField","label","id","name","placeholder","props","useFormikContext","errors","touched","handleBlur","handleChange","error","get","errorText","mb","fontWeight","htmlFor","TextField","onChange","onBlur","helperText","value","autoComplete","hiddenLabel","MessagesEnum","history","useHistory","paymentId","useParams","dispatch","useAppDispatch","paymentDetail","useAppSelector","state","payment","useState","isLoading","setIsLoading","initialValues","useMemo","convertResponseToFormData","editInitialValues","useEffect","getPaymentDetail","Number","finally","validationSchema","editSchema","onSubmit","setSubmitting","putPayment","data","postPayment","then","unwrapResult","displaySnackbar","message","push","PaymentPathsEnum","catch","handleErrorResponse","fullWidth","multiline","rows"],"sourceRoot":""}