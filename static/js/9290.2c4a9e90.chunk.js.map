{"version":3,"file":"static/js/9290.2c4a9e90.chunk.js","mappings":"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","sources":["components/FormElements/FormikSelect/FormikSelect.tsx","components/PreviewImage/PreviewImage.tsx","features/article/components/DataTable/DataTable.tsx","features/article/components/FormSearch/FormSearch.tsx","features/article/screens/admin/ListScreen/ListScreen.tsx","../node_modules/@mui/icons-material/esm/AddRounded.js","../node_modules/@mui/icons-material/esm/CircleRounded.js"],"sourcesContent":["import React, { FC, memo } from \"react\";\n\nimport {\n  FormControl,\n  FormHelperText,\n  MenuItem,\n  Select,\n  SelectProps,\n  Typography,\n} from \"@mui/material\";\nimport { Field, useFormikContext } from \"formik\";\nimport { get } from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\n\nexport interface OptionProps {\n  value: string | number;\n  label: string;\n}\n\ninterface FormikSelectProps extends Omit<SelectProps, \"name\"> {\n  name: string;\n  options: OptionProps[];\n  ns?: string;\n}\n\nconst FormikSelect: FC<FormikSelectProps> = ({\n  fullWidth,\n  label,\n  id,\n  name,\n  displayEmpty = true,\n  variant = \"filled\",\n  options,\n  ns = \"admin\",\n  ...props\n}) => {\n  const { t } = useTranslation();\n\n  const { errors, touched, values, handleChange } = useFormikContext<unknown>();\n\n  const error = get(errors, name) && get(touched, name);\n  const errorText = get(errors, name);\n\n  return (\n    <FormControl sx={{ minWidth: 120 }} fullWidth={fullWidth}>\n      {label && (\n        <Typography sx={{ mb: 1, fontWeight: \"fontWeightMedium\" }}>\n          <label htmlFor={`label-${id || name}`}>\n            {t(`label.${label}`, { ns })}\n          </label>\n        </Typography>\n      )}\n      <Field\n        {...props}\n        label=\"\"\n        hiddenLabel\n        displayEmpty={displayEmpty}\n        labelId={`label-${id || name}`}\n        component={Select}\n        onChange={handleChange}\n        id={id || name}\n        name={name}\n        variant={variant}\n        error={!!error}\n        value={get(values, name)}\n        inputProps={{\n          name,\n        }}\n      >\n        <MenuItem value=\"\">\n          <em>{t(`${\"common.None\"}`, { ns })}</em>\n        </MenuItem>\n        {options.map(option => (\n          <MenuItem key={option.value} value={option.value}>\n            {option.label}\n          </MenuItem>\n        ))}\n      </Field>\n      {errorText && <FormHelperText error>{errorText}</FormHelperText>}\n    </FormControl>\n  );\n};\n\nexport default memo(FormikSelect);\n","import React, {\n  FC,\n  memo,\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n  useRef,\n} from \"react\";\n\nimport { Box, styled } from \"@mui/material\";\nimport { sample } from \"lodash\";\n\nimport NoImage from \"assets/images/no-image.png\";\nimport {\n  FakeImagesEnum,\n  RANDOM_IMAGES_ERROR_PRODUCT,\n  RANDOM_IMAGES_ERROR_BANNER,\n} from \"constants/common.constants\";\n\nconst BasicImage = styled(\"img\")(() => ({\n  maxWidth: \"100%\",\n  height: \"100%\",\n  display: \"block\",\n  objectFit: \"cover\",\n}));\n\ninterface PreviewImageProps\n  extends React.DetailedHTMLProps<\n    React.ImgHTMLAttributes<HTMLImageElement>,\n    HTMLImageElement\n  > {\n  file?: File | null;\n  resizedDimension?: {\n    width: number;\n    height: number;\n  };\n  borderRadius?: string | number;\n  aspectRatio?: number;\n  fakeImages?: FakeImagesEnum;\n}\n\nconst fakeImagesUrl = {\n  [FakeImagesEnum.PRODUCT]: RANDOM_IMAGES_ERROR_PRODUCT,\n  [FakeImagesEnum.BANNER]: RANDOM_IMAGES_ERROR_BANNER,\n};\n\nconst PreviewImage: FC<PreviewImageProps> = ({\n  src,\n  alt = \"alt\",\n  file,\n  resizedDimension,\n  borderRadius = 1,\n  aspectRatio,\n  width,\n  fakeImages = FakeImagesEnum.PRODUCT,\n  ...props\n}) => {\n  const [previewUrl, setPreviewUrl] = useState<string | null>();\n\n  const imageRef = useRef<HTMLImageElement | null>(null);\n\n  const handleRefImage = useCallback(() => {\n    if (!imageRef.current) return;\n\n    if (aspectRatio && imageRef.current.width) {\n      imageRef.current.style.setProperty(\n        \"height\",\n        `${imageRef.current.width / aspectRatio}px`\n      );\n    }\n  }, [aspectRatio]);\n\n  const handleImageOnLoad = useCallback(() => {\n    handleRefImage();\n  }, [handleRefImage]);\n\n  useEffect(() => {\n    const reader = new FileReader();\n    if (file && file instanceof File) {\n      reader.onloadend = readerEvent => {\n        if (!resizedDimension) {\n          setPreviewUrl(readerEvent.target?.result?.toString());\n        } else {\n          const canvas = document.createElement(\"canvas\");\n          canvas.width = resizedDimension.width;\n          canvas.height = resizedDimension.height;\n          const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n          const resizedImage = new Image();\n\n          resizedImage.onload = () => {\n            ctx.drawImage(\n              resizedImage,\n              0,\n              0,\n              resizedDimension.width,\n              resizedDimension.height\n            );\n            const dataUrl = canvas.toDataURL(file.type);\n\n            setPreviewUrl(dataUrl);\n          };\n          resizedImage.src = readerEvent.target?.result?.toString() || \"\";\n        }\n      };\n      reader.readAsDataURL(file);\n    } else if (typeof file === \"string\") {\n      if (previewUrl === file) {\n        return;\n      }\n\n      setPreviewUrl(file);\n    } else {\n      if (previewUrl === null) return;\n\n      setPreviewUrl(null);\n    }\n  }, [file, previewUrl, resizedDimension]);\n\n  const imageSrc = useMemo(() => {\n    if (!src) return \"\";\n    if (src.match(/^(blob:)?https?:\\/\\/[\\w/:%#$&?()~.=+-]+$/g)) {\n      return src;\n    }\n    return `${process.env.REACT_APP_PATH_UPLOAD + src}`;\n  }, [src]);\n\n  return (\n    <Box sx={{ width: \"100%\" }}>\n      <BasicImage\n        src={previewUrl || imageSrc || NoImage}\n        alt={alt}\n        {...props}\n        sx={{\n          borderRadius,\n          width: width || \"100%\",\n        }}\n        onError={({ currentTarget }) => {\n          currentTarget.onerror = null;\n          currentTarget.src = sample(fakeImagesUrl[fakeImages]) || \"\";\n        }}\n        ref={image => {\n          if (!image) {\n            return;\n          }\n\n          imageRef.current = image;\n\n          image.onload = handleImageOnLoad;\n\n          if (image.complete) {\n            handleImageOnLoad();\n          }\n        }}\n        style={{\n          height: props.height,\n        }}\n      />\n    </Box>\n  );\n};\n\nexport default memo(PreviewImage);\n","import React, { FC, memo, useState } from \"react\";\n\nimport { CircleRounded, MoreVertRounded } from \"@mui/icons-material\";\nimport {\n  IconButton,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { compile } from \"path-to-regexp\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n\nimport ConfirmDialog from \"components/ConfirmDialog/ConfirmDialog\";\nimport ListNavigation from \"components/ListNavigation/ListNavigation\";\nimport PreviewImage from \"components/PreviewImage/PreviewImage\";\nimport { ModesScreenEnum } from \"constants/common.constants\";\nimport { MessagesEnum } from \"constants/message.constants\";\nimport {\n  ArticlePathsEnum,\n  deleteArticle,\n  ArticleStatusEnum,\n  ArticleDef,\n  ArticleParams,\n} from \"features/article/article\";\nimport { formatDate } from \"helpers/converts/format-date\";\nimport { handleErrorResponse } from \"helpers/forms/handle-error-response\";\nimport { displaySnackbar } from \"redux/snackbar.slice\";\nimport { useAppDispatch } from \"redux/store\";\n\ninterface DataTableProps {\n  articles: ArticleDef[];\n  total: number;\n  queries: ArticleParams;\n  setQueries: React.Dispatch<React.SetStateAction<ArticleParams>>;\n}\n\nconst DataTable: FC<DataTableProps> = ({\n  articles,\n  total,\n  queries,\n  setQueries,\n}) => {\n  const { t } = useTranslation();\n\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n\n  const [isOpenDeleteDialog, setIsOpenDeleteDialog] = useState(false);\n  const [selectedRow, setSelectedRow] = useState<ArticleDef | null>(null);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setQueries(prev => ({ ...prev, page: newPage + 1 }));\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setQueries(prev => ({\n      ...prev,\n      page: 1,\n      perPage: parseInt(event.target.value, 10),\n    }));\n  };\n\n  const handleOpenDeleteDialog = () => {\n    setIsOpenDeleteDialog(true);\n  };\n\n  const handleDeleteArticle = () => {\n    if (!selectedRow) return;\n\n    dispatch(deleteArticle(selectedRow.id))\n      .then(unwrapResult)\n      .then(() => {\n        dispatch(\n          displaySnackbar({\n            message: MessagesEnum.DELETE_SUCCESS,\n          })\n        );\n        setQueries(prev => ({\n          ...prev,\n          page: 1,\n        }));\n      })\n      .catch(() => handleErrorResponse({ dispatch }))\n      .finally(() => setIsOpenDeleteDialog(false));\n  };\n\n  const handleRedirectEditPage = () => {\n    if (!selectedRow) return;\n\n    history.push(\n      compile(ArticlePathsEnum.EDIT)({\n        mode: ModesScreenEnum.EDIT,\n        articleId: selectedRow.id,\n      })\n    );\n  };\n\n  const handleOpenMenu = (\n    event: React.MouseEvent<HTMLElement>,\n    row: ArticleDef\n  ) => {\n    setAnchorEl(event.currentTarget);\n    setSelectedRow(row);\n  };\n\n  const handleCloseMenu = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <Paper elevation={3}>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell />\n                <TableCell>{t(\"label.ID\", { ns: \"admin\" })}</TableCell>\n                <TableCell>{t(\"label.Title\", { ns: \"admin\" })}</TableCell>\n                <TableCell>{t(\"label.Thumbnail\", { ns: \"admin\" })}</TableCell>\n                <TableCell>{t(\"label.Author\", { ns: \"admin\" })}</TableCell>\n                <TableCell>{t(\"label.Source\", { ns: \"admin\" })}</TableCell>\n                <TableCell>{t(\"label.Status\", { ns: \"admin\" })}</TableCell>\n                <TableCell>{t(\"label.Created at\", { ns: \"admin\" })}</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {articles.map(row => (\n                <TableRow\n                  key={row.id}\n                  sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                >\n                  <TableCell width={80}>\n                    <IconButton onClick={e => handleOpenMenu(e, row)}>\n                      <MoreVertRounded />\n                    </IconButton>\n                  </TableCell>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.id}\n                  </TableCell>\n                  <TableCell>{row.title}</TableCell>\n                  <TableCell>\n                    <PreviewImage width={80} height={80} src={row.thumbnail} />\n                  </TableCell>\n                  <TableCell>{row.author}</TableCell>\n                  <TableCell>{row.source}</TableCell>\n                  <TableCell>\n                    <CircleRounded\n                      fontSize=\"small\"\n                      color={\n                        row.status === ArticleStatusEnum.DISPLAY\n                          ? \"success\"\n                          : \"error\"\n                      }\n                    />\n                  </TableCell>\n                  <TableCell>{formatDate(row.createdAt)}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={total}\n          rowsPerPage={queries?.perPage || 5}\n          page={queries.page - 1}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n          labelRowsPerPage={t(\"label.Rows per page\", { ns: \"admin\" })}\n        />\n      </Paper>\n\n      <ConfirmDialog\n        open={isOpenDeleteDialog}\n        onClose={() => setIsOpenDeleteDialog(false)}\n        onSubmit={handleDeleteArticle}\n        title={t(\"common.Do you want delete record?\", { ns: \"admin\" })}\n      />\n\n      <ListNavigation\n        anchorEl={anchorEl}\n        handleCloseMenu={handleCloseMenu}\n        handleOpenDeleteDialog={handleOpenDeleteDialog}\n        handleRedirectEditPage={handleRedirectEditPage}\n      />\n    </>\n  );\n};\n\nexport default memo(DataTable);\n","import React, { FC, memo, useMemo } from \"react\";\n\nimport { Box, Button, Grid, Paper, Typography } from \"@mui/material\";\nimport { Formik, Form } from \"formik\";\nimport { omit } from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\n\nimport FormikSelect from \"components/FormElements/FormikSelect/FormikSelect\";\nimport FormikTextField from \"components/FormElements/FormikTextField/FormikTextField\";\nimport {\n  ARTICLE_STATUS_OPTIONS,\n  searchSchema,\n  ArticleParams,\n} from \"features/article/article\";\nimport { useAppSelector } from \"redux/store\";\n\ninterface FormSearchProps {\n  isSubmitting: boolean;\n  setIsSubmitting: React.Dispatch<React.SetStateAction<boolean>>;\n  queries: ArticleParams;\n  setQueries: React.Dispatch<React.SetStateAction<ArticleParams>>;\n}\n\nconst FormSearch: FC<FormSearchProps> = ({\n  isSubmitting,\n  setIsSubmitting,\n  queries,\n  setQueries,\n}) => {\n  const { t } = useTranslation();\n\n  const { allCategory } = useAppSelector(state => state.category);\n\n  const categoryOptions = useMemo(() => {\n    return (\n      allCategory?.map(item => ({\n        label: item.title,\n        value: item.id,\n      })) || []\n    );\n  }, [allCategory]);\n\n  const handleSubmit = (values: ArticleParams) => {\n    setQueries(values);\n    if (Object.values(omit(values, [\"page\", \"perPage\"])).some(item => !!item)) {\n      setIsSubmitting(true);\n    }\n  };\n\n  return (\n    <Box sx={{ p: 3, mb: 4 }} component={Paper} elevation={3}>\n      <Typography variant=\"h5\">\n        {t(\"button.Search\", { ns: \"admin\" })}\n      </Typography>\n      <Box mt={3}>\n        <Formik\n          validationSchema={searchSchema}\n          initialValues={queries}\n          onSubmit={handleSubmit}\n        >\n          <Form>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={4}>\n                <FormikTextField\n                  name=\"id\"\n                  label=\"ID\"\n                  placeholder=\"example\"\n                  fullWidth\n                />\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <FormikTextField\n                  name=\"title\"\n                  label=\"Title\"\n                  placeholder=\"example\"\n                  fullWidth\n                />\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <FormikSelect\n                  name=\"status\"\n                  label=\"Status\"\n                  options={ARTICLE_STATUS_OPTIONS}\n                  fullWidth\n                />\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <FormikSelect\n                  name=\"categoryId\"\n                  label=\"Categories\"\n                  options={categoryOptions}\n                  fullWidth\n                />\n              </Grid>\n            </Grid>\n            <Box sx={{ textAlign: \"right\", mt: 2 }}>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                size=\"large\"\n                type=\"submit\"\n                disabled={isSubmitting}\n              >\n                {t(\"button.Search\", { ns: \"admin\" })}\n              </Button>\n            </Box>\n          </Form>\n        </Formik>\n      </Box>\n    </Box>\n  );\n};\n\nexport default memo(FormSearch);\n","import React, { FC, useEffect, useState } from \"react\";\n\nimport { AddRounded } from \"@mui/icons-material\";\nimport { Box, Button, Typography } from \"@mui/material\";\nimport { compile } from \"path-to-regexp\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport Loader from \"components/Loader/Loader\";\nimport { ModesScreenEnum } from \"constants/common.constants\";\nimport {\n  ArticlePathsEnum,\n  searchInitialValues,\n  getArticleList,\n  ArticleParams,\n} from \"features/article/article\";\nimport { CategoryTypesEnum, getAllCategory } from \"features/category/category\";\nimport { useAppDispatch, useAppSelector } from \"redux/store\";\n\nimport DataTable from \"../../../components/DataTable/DataTable\";\nimport FormSearch from \"../../../components/FormSearch/FormSearch\";\n\nconst ListScreen: FC = () => {\n  const { t } = useTranslation();\n\n  const dispatch = useAppDispatch();\n  const { articles } = useAppSelector(state => state.article);\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [queries, setQueries] = useState<ArticleParams>(searchInitialValues);\n\n  useEffect(() => {\n    dispatch(getArticleList(queries)).finally(() => {\n      setIsLoading(false);\n      setIsSubmitting(false);\n    });\n  }, [dispatch, queries]);\n\n  useEffect(() => {\n    dispatch(getAllCategory({ type: CategoryTypesEnum.ARTICLE }));\n  }, [dispatch]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <Box\n        sx={{\n          display: \"flex\",\n          py: 3,\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Typography variant=\"h5\">\n          {t(\"common.Manage\", { ns: \"admin\" })}&nbsp;\n          {t(\"sidebar.Articles\", { ns: \"admin\" })}\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<AddRounded />}\n          component={Link}\n          size=\"large\"\n          to={compile(ArticlePathsEnum.EDIT)({\n            mode: ModesScreenEnum.CREATE,\n          })}\n        >\n          {t(\"button.Add new\", { ns: \"admin\" })}\n        </Button>\n      </Box>\n\n      <FormSearch\n        isSubmitting={isSubmitting}\n        setIsSubmitting={setIsSubmitting}\n        queries={queries}\n        setQueries={setQueries}\n      />\n\n      {articles && articles.list.length ? (\n        <DataTable\n          articles={articles.list}\n          total={articles.totalItems}\n          queries={queries}\n          setQueries={setQueries}\n        />\n      ) : (\n        <Typography>{t(\"common.No data\", { ns: \"admin\" })}</Typography>\n      )}\n    </>\n  );\n};\n\nexport default ListScreen;\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M18 13h-5v5c0 .55-.45 1-1 1s-1-.45-1-1v-5H6c-.55 0-1-.45-1-1s.45-1 1-1h5V6c0-.55.45-1 1-1s1 .45 1 1v5h5c.55 0 1 .45 1 1s-.45 1-1 1z\"\n}), 'AddRounded');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2z\"\n}), 'CircleRounded');"],"names":["FormikSelect","fullWidth","label","id","name","displayEmpty","variant","options","ns","props","t","useTranslation","useFormikContext","errors","touched","values","handleChange","error","get","errorText","sx","minWidth","mb","fontWeight","htmlFor","hiddenLabel","labelId","component","Select","onChange","value","inputProps","map","option","memo","BasicImage","styled","maxWidth","height","display","objectFit","fakeImagesUrl","FakeImagesEnum","RANDOM_IMAGES_ERROR_PRODUCT","RANDOM_IMAGES_ERROR_BANNER","PreviewImage","src","alt","file","resizedDimension","borderRadius","aspectRatio","width","fakeImages","useState","previewUrl","setPreviewUrl","imageRef","useRef","handleRefImage","useCallback","current","style","setProperty","handleImageOnLoad","useEffect","reader","FileReader","File","onloadend","readerEvent","canvas","document","createElement","ctx","getContext","resizedImage","Image","onload","drawImage","dataUrl","toDataURL","type","target","result","toString","readAsDataURL","imageSrc","useMemo","match","process","NoImage","onError","currentTarget","onerror","sample","ref","image","complete","DataTable","articles","total","queries","setQueries","dispatch","useAppDispatch","history","useHistory","isOpenDeleteDialog","setIsOpenDeleteDialog","selectedRow","setSelectedRow","anchorEl","setAnchorEl","Paper","elevation","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","row","border","IconButton","onClick","e","event","handleOpenMenu","MoreVertRounded","scope","title","thumbnail","author","source","CircleRounded","fontSize","color","status","ArticleStatusEnum","formatDate","createdAt","TablePagination","rowsPerPageOptions","count","rowsPerPage","perPage","page","onPageChange","newPage","prev","onRowsPerPageChange","parseInt","labelRowsPerPage","ConfirmDialog","open","onClose","onSubmit","deleteArticle","then","unwrapResult","displaySnackbar","message","MessagesEnum","catch","handleErrorResponse","finally","ListNavigation","handleCloseMenu","handleOpenDeleteDialog","handleRedirectEditPage","push","compile","ArticlePathsEnum","mode","ModesScreenEnum","articleId","FormSearch","isSubmitting","setIsSubmitting","allCategory","useAppSelector","state","category","categoryOptions","item","Box","p","Typography","mt","validationSchema","searchSchema","initialValues","Object","omit","some","Grid","container","spacing","xs","sm","FormikTextField","placeholder","ARTICLE_STATUS_OPTIONS","textAlign","Button","size","disabled","article","isLoading","setIsLoading","searchInitialValues","getArticleList","getAllCategory","CategoryTypesEnum","Loader","py","alignItems","justifyContent","startIcon","AddRounded","Link","to","list","length","totalItems","createSvgIcon","_jsx","d"],"sourceRoot":""}