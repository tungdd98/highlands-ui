{"version":3,"file":"static/js/3218.b2b9c300.chunk.js","mappings":"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","sources":["components/EditComponents/ContentWrapper.tsx","components/EditComponents/StickyHeader.tsx","components/TextEditor/TextEditor.tsx","constants/message.constants.ts","features/setting/screens/DeliveryPageScreen/DeliveryPageScreen.tsx","helpers/forms/handle-error-response.ts"],"sourcesContent":["import React, { FC, memo } from \"react\";\n\nimport { Box, Paper } from \"@mui/material\";\n\ninterface ContentWrapperProps {\n  children: React.ReactNode;\n}\n\nconst ContentWrapper: FC<ContentWrapperProps> = ({ children }) => {\n  return (\n    <Box\n      component={Paper}\n      sx={theme => ({\n        maxWidth: theme.breakpoints.values.md,\n        width: \"100%\",\n        mx: \"auto\",\n        px: 3,\n        py: 3,\n        my: 5,\n      })}\n      elevation={3}\n    >\n      {children}\n    </Box>\n  );\n};\n\nexport default memo(ContentWrapper);\n","import React, { FC, memo } from \"react\";\n\nimport { Box, Paper, Button } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\ninterface StickyHeaderProps {\n  linkBack: string;\n  isSubmitting: boolean;\n}\n\nconst StickyHeader: FC<StickyHeaderProps> = ({ linkBack, isSubmitting }) => {\n  const { t } = useTranslation();\n\n  return (\n    <Box\n      component={Paper}\n      elevation={3}\n      sx={{ px: 2, position: \"sticky\", top: 0, zIndex: 9 }}\n    >\n      <Box\n        sx={theme => ({\n          maxWidth: theme.breakpoints.values.md,\n          width: \"100%\",\n          mx: \"auto\",\n          py: 1.25,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n        })}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          component={Link}\n          to={linkBack}\n        >\n          {t(\"button.Back\", { ns: \"admin\" })}\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          disabled={isSubmitting}\n        >\n          {t(\"button.Save changes\", { ns: \"admin\" })}\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default memo(StickyHeader);\n","import React, { FC, memo, useState, useRef, useEffect } from \"react\";\n\nimport { Editor } from \"@tinymce/tinymce-react\";\nimport { useFormikContext } from \"formik\";\nimport { get } from \"lodash\";\n\ninterface TextEditorProps {\n  name: string;\n  initValue?: string | null;\n}\n\ninterface EditorProps {\n  getContent: () => string;\n  setContent: (value: string) => void;\n}\n\nconst TextEditor: FC<TextEditorProps> = ({ name, initValue }) => {\n  const { setFieldTouched, setFieldValue, initialValues } =\n    useFormikContext<unknown>();\n\n  const editorRef = useRef<EditorProps | null>(null);\n\n  const [editorInitialValue, setEditorInitialValue] = useState(\n    name ? get(initialValues, name) : initValue\n  );\n\n  const handleBlurEditor = (e: unknown, editor: EditorProps) => {\n    editor.setContent(editor.getContent());\n\n    if (name) {\n      setFieldTouched(name);\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const handleChangeEditor = (e: any) => {\n    if (name) {\n      try {\n        setFieldValue(name, e.target.getContent());\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.warn(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (name) {\n      setEditorInitialValue(!initValue ? get(initialValues, name) : initValue);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [initialValues, name]);\n\n  return (\n    <Editor\n      apiKey={process.env.REACT_TINYMCE_KEY}\n      initialValue={editorInitialValue}\n      init={{\n        height: 500,\n        menubar: false,\n        plugins: [\n          \"advlist autolink lists link image charmap print preview anchor\",\n          \"searchreplace visualblocks code fullscreen\",\n          \"insertdatetime media table paste code help wordcount\",\n        ],\n        toolbar:\n          \"undo redo | formatselect | \" +\n          \"bold italic backcolor | alignleft aligncenter \" +\n          \"alignright alignjustify | bullist numlist outdent indent | \" +\n          \"removeformat | help\",\n        content_style:\n          \"body { font-family:Helvetica,Arial,sans-serif; font-size:14px }\",\n        setup(editor) {\n          editorRef.current = editor;\n\n          editor.on(\"blur\", e => handleBlurEditor(e, editor));\n\n          editor.on(\"change\", handleChangeEditor);\n        },\n      }}\n    />\n  );\n};\n\nexport default memo(TextEditor);\n","export enum MessagesEnum {\n  CREATE_SUCCESS = \"Created success\",\n  DELETE_SUCCESS = \"Deleted success\",\n  UPDATE_SUCCESS = \"Updated success\",\n  ERROR = \"Something error\",\n  ADD_PRODUCT_SUCCESS = \"Add product success\",\n  OVER_PRODUCT_IN_CART = \"Over product\",\n}\n","import React, { FC, useState, useEffect } from \"react\";\n\nimport { Typography } from \"@mui/material\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { Form, Formik } from \"formik\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n\nimport ContentWrapper from \"components/EditComponents/ContentWrapper\";\nimport StickyHeader from \"components/EditComponents/StickyHeader\";\nimport Loader from \"components/Loader/Loader\";\nimport TextEditor from \"components/TextEditor/TextEditor\";\nimport {\n  getSettingPage,\n  patchSettingPage,\n  SettingPathsEnum,\n} from \"features/setting/setting\";\nimport { handleErrorResponse } from \"helpers/forms/handle-error-response\";\nimport { useAppDispatch, useAppSelector } from \"redux/store\";\n\nconst DeliveryPageScreen: FC = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n\n  const dispatch = useAppDispatch();\n  const { setting } = useAppSelector(state => state.setting);\n\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    dispatch(getSettingPage()).finally(() => setLoading(false));\n  }, [dispatch]);\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <Formik\n      initialValues={\n        setting\n          ? { deliveryPocily: setting.deliveryPocily }\n          : { deliveryPocily: \"\" }\n      }\n      onSubmit={(values, { setSubmitting }) => {\n        dispatch(patchSettingPage(values))\n          .then(unwrapResult)\n          .then(() => history.push(SettingPathsEnum.DETAIL))\n          .catch(() => handleErrorResponse({ dispatch }))\n          .finally(() => setSubmitting(false));\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <StickyHeader\n            linkBack={SettingPathsEnum.DETAIL}\n            isSubmitting={isSubmitting}\n          />\n\n          <ContentWrapper>\n            <Typography sx={{ fontWeight: 600, mb: 2 }}>\n              {t(\"label.Delivery Pocily content\", { ns: \"admin\" })}\n            </Typography>\n            <TextEditor name=\"deliveryPocily\" />\n          </ContentWrapper>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default DeliveryPageScreen;\n","import { MessagesEnum } from \"constants/message.constants\";\nimport { displaySnackbar } from \"redux/snackbar.slice\";\nimport { AppDispatch } from \"redux/store\";\n\nexport const handleErrorResponse = ({\n  dispatch,\n}: {\n  dispatch: AppDispatch;\n}) => {\n  dispatch(\n    displaySnackbar({\n      message: MessagesEnum.ERROR,\n    })\n  );\n};\n"],"names":["ContentWrapper","children","component","Paper","sx","theme","maxWidth","breakpoints","values","md","width","mx","px","py","my","elevation","memo","StickyHeader","linkBack","isSubmitting","t","useTranslation","position","top","zIndex","display","justifyContent","variant","color","Link","to","ns","type","disabled","TextEditor","name","initValue","useFormikContext","setFieldTouched","setFieldValue","initialValues","editorRef","useRef","useState","get","editorInitialValue","setEditorInitialValue","handleChangeEditor","e","target","getContent","error","console","warn","useEffect","apiKey","process","REACT_TINYMCE_KEY","initialValue","init","height","menubar","plugins","toolbar","content_style","setup","editor","current","on","setContent","handleBlurEditor","MessagesEnum","history","useHistory","dispatch","useAppDispatch","setting","useAppSelector","state","loading","setLoading","getSettingPage","finally","deliveryPocily","onSubmit","setSubmitting","patchSettingPage","then","unwrapResult","push","SettingPathsEnum","catch","handleErrorResponse","fontWeight","mb","displaySnackbar","message"],"sourceRoot":""}