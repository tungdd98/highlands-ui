{"version":3,"file":"static/js/1897.d120d1db.chunk.js","mappings":"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","sources":["components/EditComponents/ContentWrapper.tsx","components/EditComponents/StickyHeader.tsx","components/FormElements/FormikTextField/FormikTextField.tsx","components/PreviewImage/PreviewImage.tsx","helpers/converts/canvas-utils.ts","helpers/converts/convert-src-to-file.ts","components/UploadImage/UploadImage.tsx","constants/message.constants.ts","helpers/forms/handle-error-response.ts","helpers/forms/upload-image.ts"],"sourcesContent":["import React, { FC, memo } from \"react\";\n\nimport { Box, Paper } from \"@mui/material\";\n\ninterface ContentWrapperProps {\n  children: React.ReactNode;\n}\n\nconst ContentWrapper: FC<ContentWrapperProps> = ({ children }) => {\n  return (\n    <Box\n      component={Paper}\n      sx={theme => ({\n        maxWidth: theme.breakpoints.values.md,\n        width: \"100%\",\n        mx: \"auto\",\n        px: 3,\n        py: 3,\n        my: 5,\n      })}\n      elevation={3}\n    >\n      {children}\n    </Box>\n  );\n};\n\nexport default memo(ContentWrapper);\n","import React, { FC, memo } from \"react\";\n\nimport { Box, Paper, Button } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\ninterface StickyHeaderProps {\n  linkBack: string;\n  isSubmitting: boolean;\n}\n\nconst StickyHeader: FC<StickyHeaderProps> = ({ linkBack, isSubmitting }) => {\n  const { t } = useTranslation();\n\n  return (\n    <Box\n      component={Paper}\n      elevation={3}\n      sx={{ px: 2, position: \"sticky\", top: 0, zIndex: 9 }}\n    >\n      <Box\n        sx={theme => ({\n          maxWidth: theme.breakpoints.values.md,\n          width: \"100%\",\n          mx: \"auto\",\n          py: 1.25,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n        })}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          component={Link}\n          to={linkBack}\n        >\n          {t(\"button.Back\", { ns: \"admin\" })}\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          disabled={isSubmitting}\n        >\n          {t(\"button.Save changes\", { ns: \"admin\" })}\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default memo(StickyHeader);\n","import React, { FC, memo } from \"react\";\n\nimport { TextField, TextFieldProps, Typography } from \"@mui/material\";\nimport { Field, useFormikContext } from \"formik\";\nimport { get } from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface FormikTextFieldProps extends Omit<TextFieldProps, \"name\"> {\n  name: string;\n  ns?: string;\n}\n\nconst FormikTextField: FC<FormikTextFieldProps> = ({\n  label,\n  id,\n  name,\n  variant = \"filled\",\n  ns = \"admin\",\n  placeholder,\n  ...props\n}) => {\n  const { t } = useTranslation();\n\n  const { errors, touched, values, handleBlur, handleChange } =\n    useFormikContext<unknown>();\n\n  const error = get(errors, name) && get(touched, name);\n  const errorText = get(errors, name);\n\n  return (\n    <>\n      {label && (\n        <Typography sx={{ mb: 1, fontWeight: \"fontWeightMedium\" }}>\n          <label htmlFor={id || name}>{t(`label.${label}`, { ns })}</label>\n        </Typography>\n      )}\n      <Field\n        {...props}\n        component={TextField}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        id={id || name}\n        name={name}\n        variant={variant}\n        error={!!error}\n        helperText={error && t(errorText, { ns })}\n        value={get(values, name)}\n        autoComplete=\"off\"\n        hiddenLabel\n        label=\"\"\n        placeholder={placeholder ? t(`placeholder.${placeholder}`, { ns }) : \"\"}\n      />\n    </>\n  );\n};\n\nexport default memo(FormikTextField);\n","import React, {\n  FC,\n  memo,\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n  useRef,\n} from \"react\";\n\nimport { Box, styled } from \"@mui/material\";\nimport { sample } from \"lodash\";\n\nimport NoImage from \"assets/images/no-image.png\";\nimport {\n  FakeImagesEnum,\n  RANDOM_IMAGES_ERROR_PRODUCT,\n  RANDOM_IMAGES_ERROR_BANNER,\n} from \"constants/common.constants\";\n\nconst BasicImage = styled(\"img\")(() => ({\n  maxWidth: \"100%\",\n  height: \"100%\",\n  display: \"block\",\n  objectFit: \"cover\",\n}));\n\ninterface PreviewImageProps\n  extends React.DetailedHTMLProps<\n    React.ImgHTMLAttributes<HTMLImageElement>,\n    HTMLImageElement\n  > {\n  file?: File | null;\n  resizedDimension?: {\n    width: number;\n    height: number;\n  };\n  borderRadius?: string | number;\n  aspectRatio?: number;\n  fakeImages?: FakeImagesEnum;\n}\n\nconst fakeImagesUrl = {\n  [FakeImagesEnum.PRODUCT]: RANDOM_IMAGES_ERROR_PRODUCT,\n  [FakeImagesEnum.BANNER]: RANDOM_IMAGES_ERROR_BANNER,\n};\n\nconst PreviewImage: FC<PreviewImageProps> = ({\n  src,\n  alt = \"alt\",\n  file,\n  resizedDimension,\n  borderRadius = 1,\n  aspectRatio,\n  width,\n  fakeImages = FakeImagesEnum.PRODUCT,\n  ...props\n}) => {\n  const [previewUrl, setPreviewUrl] = useState<string | null>();\n\n  const imageRef = useRef<HTMLImageElement | null>(null);\n\n  const handleRefImage = useCallback(() => {\n    if (!imageRef.current) return;\n\n    if (aspectRatio && imageRef.current.width) {\n      imageRef.current.style.setProperty(\n        \"height\",\n        `${imageRef.current.width / aspectRatio}px`\n      );\n    }\n  }, [aspectRatio]);\n\n  const handleImageOnLoad = useCallback(() => {\n    handleRefImage();\n  }, [handleRefImage]);\n\n  useEffect(() => {\n    const reader = new FileReader();\n    if (file && file instanceof File) {\n      reader.onloadend = readerEvent => {\n        if (!resizedDimension) {\n          setPreviewUrl(readerEvent.target?.result?.toString());\n        } else {\n          const canvas = document.createElement(\"canvas\");\n          canvas.width = resizedDimension.width;\n          canvas.height = resizedDimension.height;\n          const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n          const resizedImage = new Image();\n\n          resizedImage.onload = () => {\n            ctx.drawImage(\n              resizedImage,\n              0,\n              0,\n              resizedDimension.width,\n              resizedDimension.height\n            );\n            const dataUrl = canvas.toDataURL(file.type);\n\n            setPreviewUrl(dataUrl);\n          };\n          resizedImage.src = readerEvent.target?.result?.toString() || \"\";\n        }\n      };\n      reader.readAsDataURL(file);\n    } else if (typeof file === \"string\") {\n      if (previewUrl === file) {\n        return;\n      }\n\n      setPreviewUrl(file);\n    } else {\n      if (previewUrl === null) return;\n\n      setPreviewUrl(null);\n    }\n  }, [file, previewUrl, resizedDimension]);\n\n  const imageSrc = useMemo(() => {\n    if (!src) return \"\";\n    if (src.match(/^(blob:)?https?:\\/\\/[\\w/:%#$&?()~.=+-]+$/g)) {\n      return src;\n    }\n    return `${process.env.REACT_APP_PATH_UPLOAD + src}`;\n  }, [src]);\n\n  return (\n    <Box sx={{ width: \"100%\" }}>\n      <BasicImage\n        src={previewUrl || imageSrc || NoImage}\n        alt={alt}\n        {...props}\n        sx={{\n          borderRadius,\n          width: width || \"100%\",\n        }}\n        onError={({ currentTarget }) => {\n          currentTarget.onerror = null;\n          currentTarget.src = sample(fakeImagesUrl[fakeImages]) || \"\";\n        }}\n        ref={image => {\n          if (!image) {\n            return;\n          }\n\n          imageRef.current = image;\n\n          image.onload = handleImageOnLoad;\n\n          if (image.complete) {\n            handleImageOnLoad();\n          }\n        }}\n        style={{\n          height: props.height,\n        }}\n      />\n    </Box>\n  );\n};\n\nexport default memo(PreviewImage);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nexport const createImage = (url: string) =>\n  new Promise((resolve, reject) => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => resolve(image));\n    image.addEventListener(\"error\", error => reject(error));\n    image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n    image.src = url;\n  });\n\nexport const getRadianAngle = (degreeValue: number) => {\n  return (degreeValue * Math.PI) / 180;\n};\n\n/**\n * Returns the new bounding area of a rotated rectangle.\n */\nexport const rotateSize = (width: number, height: number, rotation: number) => {\n  const rotRad = getRadianAngle(rotation);\n\n  return {\n    width:\n      Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\n    height:\n      Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height),\n  };\n};\n\n/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n */\nexport const getCroppedImg = async (\n  imageSrc: string,\n  pixelCrop: any,\n  rotation = 0,\n  flip = { horizontal: false, vertical: false }\n) => {\n  const image: any = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n\n  if (!ctx) {\n    return null;\n  }\n\n  const rotRad = getRadianAngle(rotation);\n\n  // calculate bounding box of the rotated image\n  const { width: bBoxWidth, height: bBoxHeight } = rotateSize(\n    image.width,\n    image.height,\n    rotation\n  );\n\n  // set canvas size to match the bounding box\n  canvas.width = bBoxWidth;\n  canvas.height = bBoxHeight;\n\n  // translate canvas context to a central location to allow rotating and flipping around the center\n  ctx.translate(bBoxWidth / 2, bBoxHeight / 2);\n  ctx.rotate(rotRad);\n  ctx.scale(flip.horizontal ? -1 : 1, flip.vertical ? -1 : 1);\n  ctx.translate(-image.width / 2, -image.height / 2);\n\n  // draw rotated image\n  ctx.drawImage(image, 0, 0);\n\n  // croppedAreaPixels values are bounding box relative\n  // extract the cropped image using these values\n  const data = ctx.getImageData(\n    pixelCrop.x || 0,\n    pixelCrop.y || 0,\n    pixelCrop.width,\n    pixelCrop.height\n  );\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n\n  // paste generated rotate image at the top left corner\n  ctx.putImageData(data, 0, 0);\n\n  // As Base64 string\n  // return canvas.toDataURL('image/jpeg');\n\n  // As a blob\n  return new Promise(resolve => {\n    canvas.toBlob(file => {\n      resolve(URL.createObjectURL(file as Blob));\n    }, \"image/jpeg\");\n  });\n};\n\nexport const getRotatedImage = async (imageSrc: string, rotation = 0) => {\n  const image: any = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx: any = canvas.getContext(\"2d\");\n\n  const orientationChanged =\n    rotation === 90 ||\n    rotation === -90 ||\n    rotation === 270 ||\n    rotation === -270;\n  if (orientationChanged) {\n    canvas.width = image.height;\n    canvas.height = image.width;\n  } else {\n    canvas.width = image.width;\n    canvas.height = image.height;\n  }\n\n  ctx.translate(canvas.width / 2, canvas.height / 2);\n  ctx.rotate((rotation * Math.PI) / 180);\n  ctx.drawImage(image, -image.width / 2, -image.height / 2);\n\n  return new Promise(resolve => {\n    canvas.toBlob(file => {\n      resolve(URL.createObjectURL(file as Blob));\n    }, \"image/png\");\n  });\n};\n\nexport const readFile = (file: File) => {\n  return new Promise(resolve => {\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => resolve(reader.result), false);\n    reader.readAsDataURL(file);\n  });\n};\n","export const convertSrcToFile = async (src: string): Promise<File | null> => {\n  try {\n    const fileName = \"image.jpg\";\n    const response = await fetch(src, { cache: \"no-cache\" });\n    const blob = await response.blob();\n    const type = response.headers.get(\"content-type\") || undefined;\n\n    return new File([blob], fileName, { type });\n  } catch (error) {\n    return null;\n  }\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { FC, memo, useState, useCallback, useRef } from \"react\";\n\nimport { FileUploadRounded } from \"@mui/icons-material\";\nimport {\n  Box,\n  BoxProps,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormHelperText,\n  Slider,\n  Typography,\n} from \"@mui/material\";\nimport { useFormikContext } from \"formik\";\nimport { getOrientation } from \"get-orientation/browser\";\nimport { get } from \"lodash\";\nimport Cropper from \"react-easy-crop\";\nimport { Point, Area } from \"react-easy-crop/types\";\nimport { useTranslation } from \"react-i18next\";\n\nimport {\n  ORIENTATION_TO_ANGLE,\n  AspectRatioEnum,\n} from \"constants/common.constants\";\nimport {\n  readFile,\n  getRotatedImage,\n  getCroppedImg,\n} from \"helpers/converts/canvas-utils\";\nimport { convertSrcToFile } from \"helpers/converts/convert-src-to-file\";\n\nimport PreviewImage from \"../PreviewImage/PreviewImage\";\n\ninterface UploadImageProps extends BoxProps {\n  id?: string;\n  name: string;\n  cropAspectRatio?: AspectRatioEnum;\n  label?: string;\n}\n\nconst UploadImage: FC<UploadImageProps> = ({\n  id,\n  name,\n  label,\n  cropAspectRatio = AspectRatioEnum.SIXTEEN_TO_NINE,\n  ...props\n}) => {\n  const { t } = useTranslation();\n\n  const { setFieldValue, values, errors } = useFormikContext<unknown>();\n\n  const [open, setOpen] = useState(false);\n  const [imageSrc, setImageSrc] = useState<string | null>(null);\n  const [rotation, setRotation] = useState<number | number[]>(0);\n  const [crop, setCrop] = useState<Point>({ x: 0, y: 0 });\n  const [zoom, setZoom] = useState<number | number[]>(1);\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState<Area | null>(null);\n  const [croppedImage, setCroppedImage] = useState<any>(null);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const src = get(values, name);\n  const error = get(errors, name);\n\n  const onCropComplete = (croppedArea: Area, croppedAreaPixelsTemp: Area) => {\n    setCroppedAreaPixels(croppedAreaPixelsTemp);\n  };\n\n  const onFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const file = e.target.files[0];\n\n      if (inputRef.current) {\n        inputRef.current.value = \"\";\n      }\n\n      let imageDataUrl = await readFile(file);\n\n      // apply rotation if needed\n      const orientation = await getOrientation(file);\n      const rotationTemp = get(ORIENTATION_TO_ANGLE, orientation);\n      if (rotationTemp) {\n        imageDataUrl = await getRotatedImage(\n          imageDataUrl as string,\n          rotationTemp\n        );\n      }\n\n      setImageSrc(imageDataUrl as string);\n      setOpen(true);\n    }\n  };\n\n  const onClose = () => {\n    setOpen(false);\n    setCroppedImage(null);\n    setRotation(0);\n    setZoom(1);\n    setCrop({ x: 0, y: 0 });\n  };\n\n  const showCroppedImage = useCallback(async () => {\n    if (!imageSrc) return;\n    try {\n      const croppedImageTemp = await getCroppedImg(\n        imageSrc,\n        croppedAreaPixels,\n        rotation as number\n      );\n      setCroppedImage(croppedImageTemp);\n\n      const file = await convertSrcToFile(`${croppedImageTemp}`);\n\n      setOpen(false);\n      setRotation(0);\n      setZoom(0);\n      if (file) {\n        setFieldValue(name, file);\n      }\n    } catch (err) {\n      // TODO: Handle crop error\n    }\n  }, [imageSrc, croppedAreaPixels, rotation, setFieldValue, name]);\n\n  return (\n    <Box sx={{ mb: 3, maxWidth: 480 }} {...props}>\n      <Dialog open={open} maxWidth=\"md\" keepMounted fullWidth>\n        <DialogTitle>{t(\"button.Crop Image\", { ns: \"admin\" })}</DialogTitle>\n\n        {imageSrc && (\n          <DialogContent>\n            <Box\n              sx={theme => ({\n                position: \"relative\",\n                width: \"100%\",\n                height: 200,\n                background: \"#333\",\n                [theme.breakpoints.up(\"sm\")]: {\n                  height: 400,\n                },\n              })}\n            >\n              <Cropper\n                image={imageSrc}\n                crop={crop}\n                rotation={rotation as number}\n                zoom={zoom as number}\n                aspect={cropAspectRatio}\n                onCropChange={setCrop}\n                onRotationChange={setRotation}\n                onCropComplete={onCropComplete}\n                onZoomChange={setZoom}\n              />\n            </Box>\n            <Box sx={{ my: 1 }}>\n              <Typography variant=\"overline\">\n                {t(\"button.Zoom\", { ns: \"admin\" })}\n              </Typography>\n              <Slider\n                value={zoom}\n                min={1}\n                max={3}\n                step={0.1}\n                aria-labelledby=\"zoom\"\n                onChange={(e, zoomValue) => setZoom(zoomValue)}\n                sx={{\n                  marginLeft: 1,\n                }}\n              />\n            </Box>\n            <Box>\n              <Typography variant=\"overline\">\n                {t(\"button.Rotation\", { ns: \"admin\" })}\n              </Typography>\n              <Slider\n                value={rotation}\n                min={1}\n                max={3}\n                step={0.1}\n                aria-labelledby=\"rotation\"\n                onChange={(e, rotationValue) => setRotation(rotationValue)}\n                sx={{\n                  marginLeft: 1,\n                }}\n              />\n            </Box>\n          </DialogContent>\n        )}\n\n        <DialogActions>\n          <Button onClick={onClose}>\n            {t(\"button.Cancel\", { ns: \"admin\" })}\n          </Button>\n          <Button autoFocus variant=\"contained\" onClick={showCroppedImage}>\n            {t(\"button.Crop image\", { ns: \"admin\" })}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {label && (\n        <Typography sx={{ mb: 1, fontWeight: 500 }}>\n          <label htmlFor={id || name}>\n            {t(`label.${label}`, { ns: \"admin\" })}\n          </label>\n        </Typography>\n      )}\n\n      <PreviewImage src={croppedImage || src} />\n\n      {error && <FormHelperText error>{error}</FormHelperText>}\n\n      <Box sx={{ mt: 2 }}>\n        <label htmlFor={id || name}>\n          <input\n            accept=\"image/*\"\n            id={id || name}\n            multiple\n            type=\"file\"\n            hidden\n            name={name}\n            onChange={onFileChange}\n            ref={inputRef}\n          />\n          <Button\n            variant=\"contained\"\n            component=\"span\"\n            startIcon={<FileUploadRounded />}\n          >\n            {t(\"button.Upload\", { ns: \"admin\" })}\n          </Button>\n        </label>\n      </Box>\n    </Box>\n  );\n};\n\nexport default memo(UploadImage);\n","export enum MessagesEnum {\n  CREATE_SUCCESS = \"Created success\",\n  DELETE_SUCCESS = \"Deleted success\",\n  UPDATE_SUCCESS = \"Updated success\",\n  ERROR = \"Something error\",\n  ADD_PRODUCT_SUCCESS = \"Add product success\",\n  OVER_PRODUCT_IN_CART = \"Over product\",\n}\n","import { MessagesEnum } from \"constants/message.constants\";\nimport { displaySnackbar } from \"redux/snackbar.slice\";\nimport { AppDispatch } from \"redux/store\";\n\nexport const handleErrorResponse = ({\n  dispatch,\n}: {\n  dispatch: AppDispatch;\n}) => {\n  dispatch(\n    displaySnackbar({\n      message: MessagesEnum.ERROR,\n    })\n  );\n};\n","import axios from \"axios\";\n\nexport const uploadImage = async (file: File): Promise<string | null> => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  return axios({\n    method: \"post\",\n    url: `${process.env.REACT_APP_HOST}/upload/post`,\n    data: formData,\n    headers: { \"Content-Type\": \"multipart/form-data\" },\n  })\n    .then(res => {\n      return res.data.file.filename;\n    })\n    .catch(() => {\n      return null;\n    });\n};\n"],"names":["ContentWrapper","children","component","Paper","sx","theme","maxWidth","breakpoints","values","md","width","mx","px","py","my","elevation","memo","StickyHeader","linkBack","isSubmitting","t","useTranslation","position","top","zIndex","display","justifyContent","variant","color","Link","to","ns","type","disabled","FormikTextField","label","id","name","placeholder","props","useFormikContext","errors","touched","handleBlur","handleChange","error","get","errorText","mb","fontWeight","htmlFor","TextField","onChange","onBlur","helperText","value","autoComplete","hiddenLabel","BasicImage","styled","height","objectFit","fakeImagesUrl","FakeImagesEnum","RANDOM_IMAGES_ERROR_PRODUCT","RANDOM_IMAGES_ERROR_BANNER","PreviewImage","src","alt","file","resizedDimension","borderRadius","aspectRatio","fakeImages","useState","previewUrl","setPreviewUrl","imageRef","useRef","handleRefImage","useCallback","current","style","setProperty","handleImageOnLoad","useEffect","reader","FileReader","File","onloadend","readerEvent","canvas","document","createElement","ctx","getContext","resizedImage","Image","onload","drawImage","dataUrl","toDataURL","target","result","toString","readAsDataURL","imageSrc","useMemo","match","process","NoImage","onError","currentTarget","onerror","sample","ref","image","complete","createImage","url","Promise","resolve","reject","addEventListener","setAttribute","getRadianAngle","degreeValue","Math","PI","rotateSize","rotation","rotRad","abs","cos","sin","getCroppedImg","pixelCrop","flip","horizontal","vertical","bBoxWidth","bBoxHeight","translate","rotate","scale","data","getImageData","x","y","putImageData","toBlob","URL","createObjectURL","getRotatedImage","readFile","convertSrcToFile","fileName","fetch","cache","response","blob","headers","undefined","UploadImage","cropAspectRatio","AspectRatioEnum","setFieldValue","open","setOpen","setImageSrc","setRotation","crop","setCrop","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","croppedImage","setCroppedImage","inputRef","onFileChange","e","files","length","imageDataUrl","getOrientation","orientation","rotationTemp","ORIENTATION_TO_ANGLE","showCroppedImage","croppedImageTemp","Box","Dialog","keepMounted","fullWidth","DialogTitle","DialogContent","background","up","aspect","onCropChange","onRotationChange","onCropComplete","croppedArea","croppedAreaPixelsTemp","onZoomChange","Typography","Slider","min","max","step","zoomValue","marginLeft","rotationValue","DialogActions","Button","onClick","autoFocus","FormHelperText","mt","accept","multiple","hidden","startIcon","FileUploadRounded","MessagesEnum","handleErrorResponse","dispatch","displaySnackbar","message","uploadImage","formData","FormData","append","axios","method","then","res","filename","catch"],"sourceRoot":""}