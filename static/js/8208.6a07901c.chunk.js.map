{"version":3,"file":"static/js/8208.6a07901c.chunk.js","mappings":"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","sources":["components/FormElements/FormikSelect/FormikSelect.tsx","features/category/components/DataTable/DataTable.tsx","features/category/components/FormSearch/FormSearch.tsx","features/category/screens/admin/ListScreen/ListScreen.tsx","../node_modules/@mui/icons-material/esm/AddRounded.js"],"sourcesContent":["import React, { FC, memo } from \"react\";\n\nimport {\n  FormControl,\n  FormHelperText,\n  MenuItem,\n  Select,\n  SelectProps,\n  Typography,\n} from \"@mui/material\";\nimport { Field, useFormikContext } from \"formik\";\nimport { get } from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\n\nexport interface OptionProps {\n  value: string | number;\n  label: string;\n}\n\ninterface FormikSelectProps extends Omit<SelectProps, \"name\"> {\n  name: string;\n  options: OptionProps[];\n  ns?: string;\n}\n\nconst FormikSelect: FC<FormikSelectProps> = ({\n  fullWidth,\n  label,\n  id,\n  name,\n  displayEmpty = true,\n  variant = \"filled\",\n  options,\n  ns = \"admin\",\n  ...props\n}) => {\n  const { t } = useTranslation();\n\n  const { errors, touched, values, handleChange } = useFormikContext<unknown>();\n\n  const error = get(errors, name) && get(touched, name);\n  const errorText = get(errors, name);\n\n  return (\n    <FormControl sx={{ minWidth: 120 }} fullWidth={fullWidth}>\n      {label && (\n        <Typography sx={{ mb: 1, fontWeight: \"fontWeightMedium\" }}>\n          <label htmlFor={`label-${id || name}`}>\n            {t(`label.${label}`, { ns })}\n          </label>\n        </Typography>\n      )}\n      <Field\n        {...props}\n        label=\"\"\n        hiddenLabel\n        displayEmpty={displayEmpty}\n        labelId={`label-${id || name}`}\n        component={Select}\n        onChange={handleChange}\n        id={id || name}\n        name={name}\n        variant={variant}\n        error={!!error}\n        value={get(values, name)}\n        inputProps={{\n          name,\n        }}\n      >\n        <MenuItem value=\"\">\n          <em>{t(`${\"common.None\"}`, { ns })}</em>\n        </MenuItem>\n        {options.map(option => (\n          <MenuItem key={option.value} value={option.value}>\n            {option.label}\n          </MenuItem>\n        ))}\n      </Field>\n      {errorText && <FormHelperText error>{errorText}</FormHelperText>}\n    </FormControl>\n  );\n};\n\nexport default memo(FormikSelect);\n","import React, { FC, memo, useState } from \"react\";\n\nimport { MoreVertRounded } from \"@mui/icons-material\";\nimport {\n  IconButton,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { compile } from \"path-to-regexp\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n\nimport ConfirmDialog from \"components/ConfirmDialog/ConfirmDialog\";\nimport ListNavigation from \"components/ListNavigation/ListNavigation\";\nimport { ModesScreenEnum } from \"constants/common.constants\";\nimport { MessagesEnum } from \"constants/message.constants\";\nimport {\n  CategoryPathsEnum,\n  deleteCategory,\n  CategoryTypesEnum,\n  CategoryDef,\n  CategoryParams,\n} from \"features/category/category\";\nimport { formatDate } from \"helpers/converts/format-date\";\nimport { handleErrorResponse } from \"helpers/forms/handle-error-response\";\nimport { displaySnackbar } from \"redux/snackbar.slice\";\nimport { useAppDispatch } from \"redux/store\";\n\ninterface DataTableProps {\n  categories: CategoryDef[];\n  total: number;\n  queries: CategoryParams;\n  setQueries: React.Dispatch<React.SetStateAction<CategoryParams>>;\n}\n\nconst DataTable: FC<DataTableProps> = ({\n  categories,\n  total,\n  queries,\n  setQueries,\n}) => {\n  const { t } = useTranslation();\n  const history = useHistory();\n\n  const dispatch = useAppDispatch();\n\n  const [isOpenDeleteDialog, setIsOpenDeleteDialog] = useState(false);\n  const [selectedRow, setSelectedRow] = useState<CategoryDef | null>(null);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setQueries(prev => ({ ...prev, page: newPage + 1 }));\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setQueries(prev => ({\n      ...prev,\n      page: 1,\n      perPage: parseInt(event.target.value, 10),\n    }));\n  };\n\n  const handleOpenDeleteDialog = () => {\n    setIsOpenDeleteDialog(true);\n  };\n\n  const handleDeleteUser = () => {\n    if (!selectedRow) return;\n\n    dispatch(deleteCategory(selectedRow.id))\n      .then(unwrapResult)\n      .then(() => {\n        dispatch(\n          displaySnackbar({\n            message: MessagesEnum.DELETE_SUCCESS,\n          })\n        );\n        setQueries(prev => ({\n          ...prev,\n          page: 1,\n        }));\n      })\n      .catch(() => handleErrorResponse({ dispatch }))\n      .finally(() => setIsOpenDeleteDialog(false));\n  };\n\n  const handleRedirectEditPage = () => {\n    if (!selectedRow) return;\n\n    history.push(\n      compile(CategoryPathsEnum.EDIT)({\n        mode: ModesScreenEnum.EDIT,\n        categoryId: selectedRow.id,\n      })\n    );\n  };\n\n  const handleOpenMenu = (\n    event: React.MouseEvent<HTMLElement>,\n    row: CategoryDef\n  ) => {\n    setAnchorEl(event.currentTarget);\n    setSelectedRow(row);\n  };\n\n  const handleCloseMenu = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <Paper elevation={3}>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell />\n                <TableCell>{t(\"label.ID\", { ns: \"admin\" })}</TableCell>\n                <TableCell>{t(\"label.Title\", { ns: \"admin\" })}</TableCell>\n                <TableCell>{t(\"label.Type\", { ns: \"admin\" })}</TableCell>\n                <TableCell>{t(\"label.Created at\", { ns: \"admin\" })}</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {categories.map(row => (\n                <TableRow\n                  hover\n                  key={row.id}\n                  sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                >\n                  <TableCell width={80}>\n                    <IconButton onClick={e => handleOpenMenu(e, row)}>\n                      <MoreVertRounded />\n                    </IconButton>\n                  </TableCell>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.id}\n                  </TableCell>\n                  <TableCell>{row.title}</TableCell>\n                  <TableCell>\n                    {row.type === CategoryTypesEnum.PRODUCT\n                      ? \"Product\"\n                      : \"Article\"}\n                  </TableCell>\n                  <TableCell>{formatDate(row.createdAt)}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={total}\n          rowsPerPage={queries?.perPage || 5}\n          page={queries.page - 1}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n          labelRowsPerPage={t(\"label.Rows per page\", { ns: \"admin\" })}\n        />\n      </Paper>\n\n      <ConfirmDialog\n        open={isOpenDeleteDialog}\n        onClose={() => setIsOpenDeleteDialog(false)}\n        onSubmit={handleDeleteUser}\n        title={t(\"common.Do you want delete record?\", { ns: \"admin\" })}\n      />\n\n      <ListNavigation\n        anchorEl={anchorEl}\n        handleCloseMenu={handleCloseMenu}\n        handleOpenDeleteDialog={handleOpenDeleteDialog}\n        handleRedirectEditPage={handleRedirectEditPage}\n      />\n    </>\n  );\n};\n\nexport default memo(DataTable);\n","import React, { FC, memo } from \"react\";\n\nimport { Box, Button, Grid, Paper, Typography } from \"@mui/material\";\nimport { Formik, Form } from \"formik\";\nimport { omit } from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\n\nimport FormikSelect from \"components/FormElements/FormikSelect/FormikSelect\";\nimport FormikTextField from \"components/FormElements/FormikTextField/FormikTextField\";\nimport {\n  CATEGORY_OPTIONS,\n  searchSchema,\n  CategoryParams,\n} from \"features/category/category\";\n\ninterface FormSearchProps {\n  isSubmitting: boolean;\n  queries: CategoryParams;\n  setQueries: React.Dispatch<React.SetStateAction<CategoryParams>>;\n  setIsSubmitting: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst FormSearch: FC<FormSearchProps> = ({\n  isSubmitting,\n  setIsSubmitting,\n  queries,\n  setQueries,\n}) => {\n  const { t } = useTranslation();\n\n  const submitForm = (values: CategoryParams) => {\n    setQueries(values);\n    if (Object.values(omit(values, [\"page\", \"perPage\"])).some(item => !!item)) {\n      setIsSubmitting(true);\n    }\n  };\n\n  return (\n    <Box sx={{ p: 3, mb: 4 }} component={Paper} elevation={3}>\n      <Typography variant=\"h5\">\n        {t(\"button.Search\", { ns: \"admin\" })}\n      </Typography>\n      <Box sx={{ mt: 3 }}>\n        <Formik\n          validationSchema={searchSchema}\n          initialValues={queries}\n          onSubmit={submitForm}\n        >\n          <Form>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={4}>\n                <FormikTextField\n                  name=\"id\"\n                  label=\"ID\"\n                  placeholder=\"example\"\n                  fullWidth\n                />\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <FormikTextField\n                  name=\"title\"\n                  label=\"Title\"\n                  placeholder=\"example\"\n                  fullWidth\n                />\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <FormikSelect\n                  name=\"type\"\n                  label=\"Type\"\n                  options={CATEGORY_OPTIONS}\n                  fullWidth\n                />\n              </Grid>\n            </Grid>\n            <Box sx={{ textAlign: \"right\", mt: 2 }}>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                size=\"large\"\n                type=\"submit\"\n                disabled={isSubmitting}\n              >\n                {t(\"button.Search\", { ns: \"admin\" })}\n              </Button>\n            </Box>\n          </Form>\n        </Formik>\n      </Box>\n    </Box>\n  );\n};\n\nexport default memo(FormSearch);\n","import React, { FC, useEffect, useState } from \"react\";\n\nimport { AddRounded } from \"@mui/icons-material\";\nimport { Box, Button, Typography } from \"@mui/material\";\nimport { compile } from \"path-to-regexp\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport Loader from \"components/Loader/Loader\";\nimport { ModesScreenEnum } from \"constants/common.constants\";\nimport {\n  CategoryPathsEnum,\n  searchInitialValues,\n  getCategoryList,\n  CategoryParams,\n} from \"features/category/category\";\nimport { useAppDispatch, useAppSelector } from \"redux/store\";\n\nimport DataTable from \"../../../components/DataTable/DataTable\";\nimport FormSearch from \"../../../components/FormSearch/FormSearch\";\n\nconst ListScreen: FC = () => {\n  const { t } = useTranslation();\n\n  const dispatch = useAppDispatch();\n  const { categories } = useAppSelector(state => state.category);\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [queries, setQueries] = useState<CategoryParams>(searchInitialValues);\n\n  useEffect(() => {\n    dispatch(getCategoryList(queries)).finally(() => {\n      setIsLoading(false);\n      setIsSubmitting(false);\n    });\n  }, [dispatch, queries]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <Box\n        sx={{\n          display: \"flex\",\n          py: 3,\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Typography variant=\"h5\">\n          {t(\"common.Manage\", { ns: \"admin\" })}&nbsp;\n          {t(\"sidebar.Categories\", { ns: \"admin\" })}\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<AddRounded />}\n          component={Link}\n          size=\"large\"\n          to={compile(CategoryPathsEnum.EDIT)({\n            mode: ModesScreenEnum.CREATE,\n          })}\n        >\n          {t(\"button.Add new\", { ns: \"admin\" })}\n        </Button>\n      </Box>\n\n      <FormSearch\n        isSubmitting={isSubmitting}\n        setIsSubmitting={setIsSubmitting}\n        queries={queries}\n        setQueries={setQueries}\n      />\n\n      {categories && categories.list.length ? (\n        <DataTable\n          categories={categories.list}\n          total={categories.totalItems}\n          queries={queries}\n          setQueries={setQueries}\n        />\n      ) : (\n        <Typography>{t(\"common.No data\", { ns: \"admin\" })}</Typography>\n      )}\n    </>\n  );\n};\n\nexport default ListScreen;\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M18 13h-5v5c0 .55-.45 1-1 1s-1-.45-1-1v-5H6c-.55 0-1-.45-1-1s.45-1 1-1h5V6c0-.55.45-1 1-1s1 .45 1 1v5h5c.55 0 1 .45 1 1s-.45 1-1 1z\"\n}), 'AddRounded');"],"names":["FormikSelect","fullWidth","label","id","name","displayEmpty","variant","options","ns","props","t","useTranslation","useFormikContext","errors","touched","values","handleChange","error","get","errorText","sx","minWidth","mb","fontWeight","htmlFor","hiddenLabel","labelId","component","Select","onChange","value","inputProps","map","option","memo","DataTable","categories","total","queries","setQueries","history","useHistory","dispatch","useAppDispatch","useState","isOpenDeleteDialog","setIsOpenDeleteDialog","selectedRow","setSelectedRow","anchorEl","setAnchorEl","Paper","elevation","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","row","hover","border","width","IconButton","onClick","e","event","currentTarget","handleOpenMenu","MoreVertRounded","scope","title","type","CategoryTypesEnum","formatDate","createdAt","TablePagination","rowsPerPageOptions","count","rowsPerPage","perPage","page","onPageChange","newPage","prev","onRowsPerPageChange","parseInt","target","labelRowsPerPage","ConfirmDialog","open","onClose","onSubmit","deleteCategory","then","unwrapResult","displaySnackbar","message","MessagesEnum","catch","handleErrorResponse","finally","ListNavigation","handleCloseMenu","handleOpenDeleteDialog","handleRedirectEditPage","push","compile","CategoryPathsEnum","mode","ModesScreenEnum","categoryId","FormSearch","isSubmitting","setIsSubmitting","Box","p","Typography","mt","validationSchema","searchSchema","initialValues","Object","omit","some","item","Grid","container","spacing","xs","sm","FormikTextField","placeholder","CATEGORY_OPTIONS","textAlign","Button","color","size","disabled","useAppSelector","state","category","isLoading","setIsLoading","searchInitialValues","useEffect","getCategoryList","Loader","display","py","alignItems","justifyContent","startIcon","AddRounded","Link","to","list","length","totalItems","createSvgIcon","_jsx","d"],"sourceRoot":""}