{"version":3,"file":"static/js/9427.8bfae31b.chunk.js","mappings":"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","sources":["components/CustomLink/CustomLink.tsx","components/FormElements/FormikTextField/FormikTextField.tsx","constants/message.constants.ts","features/auth/screens/RegisterScreen/RegisterScreen.tsx","helpers/forms/handle-error-response.ts","../node_modules/@mui/icons-material/esm/AcUnitRounded.js"],"sourcesContent":["import React, { FC, memo } from \"react\";\n\nimport { Typography, TypographyProps, styled } from \"@mui/material\";\nimport { Link, LinkProps } from \"react-router-dom\";\n\ninterface CustomLinkProps extends Pick<LinkProps, \"to\">, TypographyProps {\n  children?: React.ReactNode;\n  disabledHover?: boolean;\n  isActive?: boolean;\n}\n\nconst CustomLinkStyled = styled(Link, {\n  shouldForwardProp: prop => prop !== \"disabledHover\",\n})<{ disabledHover?: boolean }>(({ theme, disabledHover }) => ({\n  textDecoration: \"none\",\n  color: \"inherit\",\n  transition: theme.transitions.create(\"color\", {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  ...(!disabledHover && {\n    \"&:hover\": {\n      color: theme.palette.primary.main,\n    },\n  }),\n}));\n\nconst CustomLink: FC<CustomLinkProps> = ({\n  to,\n  children,\n  disabledHover,\n  isActive,\n  ...props\n}) => {\n  return (\n    <Typography\n      color={isActive ? \"primary\" : \"secondary.contrastText\"}\n      {...props}\n    >\n      <CustomLinkStyled disabledHover={disabledHover} to={to}>\n        {children}\n      </CustomLinkStyled>\n    </Typography>\n  );\n};\n\nexport default memo(CustomLink);\n","import React, { FC, memo } from \"react\";\n\nimport { TextField, TextFieldProps, Typography } from \"@mui/material\";\nimport { Field, useFormikContext } from \"formik\";\nimport { get } from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface FormikTextFieldProps extends Omit<TextFieldProps, \"name\"> {\n  name: string;\n  ns?: string;\n}\n\nconst FormikTextField: FC<FormikTextFieldProps> = ({\n  label,\n  id,\n  name,\n  variant = \"filled\",\n  ns = \"admin\",\n  placeholder,\n  ...props\n}) => {\n  const { t } = useTranslation();\n\n  const { errors, touched, values, handleBlur, handleChange } =\n    useFormikContext<unknown>();\n\n  const error = get(errors, name) && get(touched, name);\n  const errorText = get(errors, name);\n\n  return (\n    <>\n      {label && (\n        <Typography sx={{ mb: 1, fontWeight: \"fontWeightMedium\" }}>\n          <label htmlFor={id || name}>{t(`label.${label}`, { ns })}</label>\n        </Typography>\n      )}\n      <Field\n        {...props}\n        component={TextField}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        id={id || name}\n        name={name}\n        variant={variant}\n        error={!!error}\n        helperText={error && t(errorText, { ns })}\n        value={get(values, name)}\n        autoComplete=\"off\"\n        hiddenLabel\n        label=\"\"\n        placeholder={placeholder ? t(`placeholder.${placeholder}`, { ns }) : \"\"}\n      />\n    </>\n  );\n};\n\nexport default memo(FormikTextField);\n","export enum MessagesEnum {\n  CREATE_SUCCESS = \"Created success\",\n  DELETE_SUCCESS = \"Deleted success\",\n  UPDATE_SUCCESS = \"Updated success\",\n  ERROR = \"Something error\",\n  ADD_PRODUCT_SUCCESS = \"Add product success\",\n  OVER_PRODUCT_IN_CART = \"Over product\",\n}\n","import React, { FC, memo } from \"react\";\n\nimport { AcUnitRounded } from \"@mui/icons-material\";\nimport { Box, Paper, Typography, Button } from \"@mui/material\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { Form, Formik, FormikHelpers } from \"formik\";\nimport { omit } from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n\nimport CustomLink from \"components/CustomLink/CustomLink\";\nimport FormikTextField from \"components/FormElements/FormikTextField/FormikTextField\";\nimport {\n  AuthPathsEnum,\n  registerInitialValues,\n  registerSchema,\n  postRegister,\n  RegisterForm,\n} from \"features/auth/auth\";\nimport { handleErrorResponse } from \"helpers/forms/handle-error-response\";\nimport { useAppDispatch } from \"redux/store\";\n\nconst RegisterScreen: FC = () => {\n  const { t } = useTranslation();\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n\n  const handleSubmit = (\n    values: RegisterForm,\n    { setSubmitting }: FormikHelpers<RegisterForm>\n  ) => {\n    dispatch(postRegister(omit(values, \"confirmPassword\")))\n      .then(unwrapResult)\n      .then(() => {\n        history.push(AuthPathsEnum.LOGIN);\n      })\n      .catch(() => handleErrorResponse({ dispatch }))\n      .finally(() => setSubmitting(false));\n  };\n\n  return (\n    <Paper elevation={10} sx={{ px: 3, py: 5, width: \"100%\" }}>\n      <Box sx={{ textAlign: \"center\" }}>\n        <AcUnitRounded fontSize=\"large\" color=\"primary\" />\n        <Typography variant=\"h5\" sx={{ fontWeight: 600 }}>\n          {t(\"label.Register\", { ns: \"admin\" })}\n        </Typography>\n      </Box>\n\n      <Formik\n        initialValues={registerInitialValues}\n        validationSchema={registerSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <Box sx={{ mb: 3 }}>\n              <FormikTextField\n                name=\"email\"\n                type=\"email\"\n                label=\"Email\"\n                placeholder=\"example@gmail.com\"\n                fullWidth\n              />\n            </Box>\n            <Box sx={{ mb: 3 }}>\n              <FormikTextField\n                name=\"name\"\n                label=\"Name\"\n                placeholder=\"example\"\n                fullWidth\n              />\n            </Box>\n            <Box sx={{ mb: 3 }}>\n              <FormikTextField\n                name=\"password\"\n                type=\"password\"\n                label=\"Password\"\n                placeholder=\"Password\"\n                fullWidth\n              />\n            </Box>\n            <Box sx={{ mb: 3 }}>\n              <FormikTextField\n                name=\"confirmPassword\"\n                type=\"password\"\n                label=\"Confirm password\"\n                placeholder=\"Password\"\n                fullWidth\n              />\n            </Box>\n            <Button\n              variant=\"contained\"\n              size=\"large\"\n              fullWidth\n              type=\"submit\"\n              disabled={isSubmitting}\n              sx={{ textTransform: \"uppercase\" }}\n            >\n              {t(\"button.Create new account\", { ns: \"admin\" })}\n            </Button>\n          </Form>\n        )}\n      </Formik>\n\n      <CustomLink\n        sx={{ mt: 3, color: \"primary.main\" }}\n        to={AuthPathsEnum.LOGIN}\n      >\n        {t(\"button.Login\", { ns: \"admin\" })}\n      </CustomLink>\n    </Paper>\n  );\n};\n\nexport default memo(RegisterScreen);\n","import { MessagesEnum } from \"constants/message.constants\";\nimport { displaySnackbar } from \"redux/snackbar.slice\";\nimport { AppDispatch } from \"redux/store\";\n\nexport const handleErrorResponse = ({\n  dispatch,\n}: {\n  dispatch: AppDispatch;\n}) => {\n  dispatch(\n    displaySnackbar({\n      message: MessagesEnum.ERROR,\n    })\n  );\n};\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M21 11h-3.17l2.54-2.54c.39-.39.39-1.02 0-1.41-.39-.39-1.03-.39-1.42 0L15 11h-2V9l3.95-3.95c.39-.39.39-1.03 0-1.42a.9959.9959 0 0 0-1.41 0L13 6.17V3c0-.55-.45-1-1-1s-1 .45-1 1v3.17L8.46 3.63a.9959.9959 0 0 0-1.41 0c-.39.39-.39 1.03 0 1.42L11 9v2H9L5.05 7.05c-.39-.39-1.03-.39-1.42 0-.39.39-.39 1.02 0 1.41L6.17 11H3c-.55 0-1 .45-1 1s.45 1 1 1h3.17l-2.54 2.54c-.39.39-.39 1.02 0 1.41.39.39 1.03.39 1.42 0L9 13h2v2l-3.95 3.95c-.39.39-.39 1.03 0 1.42.39.39 1.02.39 1.41 0L11 17.83V21c0 .55.45 1 1 1s1-.45 1-1v-3.17l2.54 2.54c.39.39 1.02.39 1.41 0 .39-.39.39-1.03 0-1.42L13 15v-2h2l3.95 3.95c.39.39 1.03.39 1.42 0 .39-.39.39-1.02 0-1.41L17.83 13H21c.55 0 1-.45 1-1s-.45-1-1-1z\"\n}), 'AcUnitRounded');"],"names":["CustomLinkStyled","styled","Link","shouldForwardProp","prop","theme","disabledHover","textDecoration","color","transition","transitions","create","easing","sharp","duration","leavingScreen","palette","primary","main","CustomLink","to","children","isActive","props","memo","FormikTextField","label","id","name","variant","ns","placeholder","t","useTranslation","useFormikContext","errors","touched","values","handleBlur","handleChange","error","get","errorText","sx","mb","fontWeight","htmlFor","component","TextField","onChange","onBlur","helperText","value","autoComplete","hiddenLabel","MessagesEnum","RegisterScreen","dispatch","useAppDispatch","history","useHistory","elevation","px","py","width","textAlign","fontSize","initialValues","registerInitialValues","validationSchema","registerSchema","onSubmit","setSubmitting","postRegister","omit","then","unwrapResult","push","AuthPathsEnum","catch","handleErrorResponse","finally","isSubmitting","type","fullWidth","size","disabled","textTransform","mt","displaySnackbar","message","createSvgIcon","_jsx","d"],"sourceRoot":""}