{"version":3,"file":"static/js/7727.8c3bad58.chunk.js","mappings":"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","sources":["components/FormElements/FormikSelect/FormikSelect.tsx","features/article/screens/admin/EditScreen/EditScreen.tsx"],"sourcesContent":["import React, { FC, memo } from \"react\";\n\nimport {\n  FormControl,\n  FormHelperText,\n  MenuItem,\n  Select,\n  SelectProps,\n  Typography,\n} from \"@mui/material\";\nimport { Field, useFormikContext } from \"formik\";\nimport { get } from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\n\nexport interface OptionProps {\n  value: string | number;\n  label: string;\n}\n\ninterface FormikSelectProps extends Omit<SelectProps, \"name\"> {\n  name: string;\n  options: OptionProps[];\n  ns?: string;\n}\n\nconst FormikSelect: FC<FormikSelectProps> = ({\n  fullWidth,\n  label,\n  id,\n  name,\n  displayEmpty = true,\n  variant = \"filled\",\n  options,\n  ns = \"admin\",\n  ...props\n}) => {\n  const { t } = useTranslation();\n\n  const { errors, touched, values, handleChange } = useFormikContext<unknown>();\n\n  const error = get(errors, name) && get(touched, name);\n  const errorText = get(errors, name);\n\n  return (\n    <FormControl sx={{ minWidth: 120 }} fullWidth={fullWidth}>\n      {label && (\n        <Typography sx={{ mb: 1, fontWeight: \"fontWeightMedium\" }}>\n          <label htmlFor={`label-${id || name}`}>\n            {t(`label.${label}`, { ns })}\n          </label>\n        </Typography>\n      )}\n      <Field\n        {...props}\n        label=\"\"\n        hiddenLabel\n        displayEmpty={displayEmpty}\n        labelId={`label-${id || name}`}\n        component={Select}\n        onChange={handleChange}\n        id={id || name}\n        name={name}\n        variant={variant}\n        error={!!error}\n        value={get(values, name)}\n        inputProps={{\n          name,\n        }}\n      >\n        <MenuItem value=\"\">\n          <em>{t(`${\"common.None\"}`, { ns })}</em>\n        </MenuItem>\n        {options.map(option => (\n          <MenuItem key={option.value} value={option.value}>\n            {option.label}\n          </MenuItem>\n        ))}\n      </Field>\n      {errorText && <FormHelperText error>{errorText}</FormHelperText>}\n    </FormControl>\n  );\n};\n\nexport default memo(FormikSelect);\n","import React, { FC, useEffect, useState, useMemo } from \"react\";\n\nimport { Box } from \"@mui/material\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { Formik, Form, FormikHelpers } from \"formik\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport ContentWrapper from \"components/EditComponents/ContentWrapper\";\nimport StickyHeader from \"components/EditComponents/StickyHeader\";\nimport FormikSelect from \"components/FormElements/FormikSelect/FormikSelect\";\nimport FormikTextField from \"components/FormElements/FormikTextField/FormikTextField\";\nimport Loader from \"components/Loader/Loader\";\nimport UploadImage from \"components/UploadImage/UploadImage\";\nimport { MessagesEnum } from \"constants/message.constants\";\nimport {\n  ARTICLE_STATUS_OPTIONS,\n  ArticlePathsEnum,\n  editSchema,\n  editInitialValues,\n  convertResponseToFormData,\n  postArticle,\n  getArticleDetail,\n  putArticle,\n  ArticleRequest,\n} from \"features/article/article\";\nimport { CategoryTypesEnum, getAllCategory } from \"features/category/category\";\nimport { handleErrorResponse } from \"helpers/forms/handle-error-response\";\nimport { uploadImage } from \"helpers/forms/upload-image\";\nimport { displaySnackbar } from \"redux/snackbar.slice\";\nimport { useAppDispatch, useAppSelector } from \"redux/store\";\n\nconst EditScreen: FC = () => {\n  const history = useHistory();\n\n  const dispatch = useAppDispatch();\n  const { articleDetail } = useAppSelector(state => state.article);\n  const { allCategory } = useAppSelector(state => state.category);\n  const { articleId } = useParams<{ articleId: string }>();\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const initialValues = useMemo(() => {\n    if (articleId && articleDetail) {\n      return convertResponseToFormData(articleDetail);\n    }\n    return editInitialValues;\n  }, [articleDetail, articleId]);\n\n  const categoryOptions = useMemo(() => {\n    return (\n      allCategory?.map(item => ({\n        label: item.title,\n        value: item.id,\n      })) || []\n    );\n  }, [allCategory]);\n\n  const handleSubmit = async (\n    values: ArticleRequest,\n    { setSubmitting }: FormikHelpers<ArticleRequest>\n  ) => {\n    if (values.thumbnail instanceof File) {\n      const response = await uploadImage(values.thumbnail);\n      if (response) {\n        values.thumbnail = response;\n      }\n    }\n    const action = articleId\n      ? dispatch(\n          putArticle({\n            data: values,\n            articleId: Number(articleId),\n          })\n        )\n      : dispatch(postArticle(values));\n\n    action\n      .then(unwrapResult)\n      .then(() => {\n        dispatch(\n          displaySnackbar({\n            message: articleId\n              ? MessagesEnum.UPDATE_SUCCESS\n              : MessagesEnum.CREATE_SUCCESS,\n          })\n        );\n        history.push(ArticlePathsEnum.LIST);\n      })\n      .catch(() => handleErrorResponse({ dispatch }))\n      .finally(() => setSubmitting(false));\n  };\n\n  useEffect(() => {\n    if (articleId) {\n      dispatch(getArticleDetail(Number(articleId))).finally(() =>\n        setIsLoading(false)\n      );\n    } else {\n      setIsLoading(false);\n    }\n  }, [dispatch, articleId]);\n\n  useEffect(() => {\n    dispatch(getAllCategory({ type: CategoryTypesEnum.ARTICLE }));\n  }, [dispatch]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={editSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <StickyHeader\n            linkBack={ArticlePathsEnum.LIST}\n            isSubmitting={isSubmitting}\n          />\n\n          <ContentWrapper>\n            <Box sx={{ mb: 3 }}>\n              <FormikTextField\n                name=\"title\"\n                label=\"Title\"\n                placeholder=\"example\"\n                fullWidth\n              />\n            </Box>\n\n            <Box sx={{ mb: 3 }}>\n              <FormikSelect\n                name=\"categoryId\"\n                label=\"Categories\"\n                options={categoryOptions}\n                fullWidth\n              />\n            </Box>\n\n            <UploadImage name=\"thumbnail\" label=\"Thumbnail\" />\n\n            <Box sx={{ mb: 3 }}>\n              <FormikTextField\n                name=\"source\"\n                label=\"Source\"\n                placeholder=\"example\"\n                fullWidth\n              />\n            </Box>\n\n            <Box sx={{ mb: 3 }}>\n              <FormikTextField\n                name=\"author\"\n                label=\"Author\"\n                placeholder=\"example\"\n                fullWidth\n              />\n            </Box>\n\n            <Box sx={{ mb: 3 }}>\n              <FormikTextField\n                name=\"description\"\n                label=\"Description\"\n                placeholder=\"example\"\n                multiline\n                fullWidth\n                rows={3}\n              />\n            </Box>\n\n            <Box sx={{ mb: 3 }}>\n              <FormikTextField\n                name=\"content\"\n                label=\"Content\"\n                placeholder=\"example\"\n                multiline\n                fullWidth\n                rows={5}\n              />\n            </Box>\n\n            <Box sx={{ mb: 3 }}>\n              <FormikSelect\n                name=\"status\"\n                label=\"Status\"\n                options={ARTICLE_STATUS_OPTIONS}\n                fullWidth\n              />\n            </Box>\n          </ContentWrapper>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default EditScreen;\n"],"names":["FormikSelect","fullWidth","label","id","name","displayEmpty","variant","options","ns","props","t","useTranslation","useFormikContext","errors","touched","values","handleChange","error","get","errorText","sx","minWidth","mb","fontWeight","htmlFor","hiddenLabel","labelId","component","Select","onChange","value","inputProps","map","option","memo","history","useHistory","dispatch","useAppDispatch","articleDetail","useAppSelector","state","article","allCategory","category","articleId","useParams","useState","isLoading","setIsLoading","initialValues","useMemo","convertResponseToFormData","editInitialValues","categoryOptions","item","title","handleSubmit","setSubmitting","thumbnail","File","uploadImage","response","putArticle","data","Number","postArticle","then","unwrapResult","displaySnackbar","message","MessagesEnum","push","ArticlePathsEnum","catch","handleErrorResponse","finally","useEffect","getArticleDetail","getAllCategory","type","CategoryTypesEnum","validationSchema","editSchema","onSubmit","isSubmitting","linkBack","placeholder","multiline","rows","ARTICLE_STATUS_OPTIONS"],"sourceRoot":""}