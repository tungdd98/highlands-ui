{"version":3,"file":"static/js/3483.bf132226.chunk.js","mappings":"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","sources":["components/EditComponents/ContentWrapper.tsx","components/EditComponents/StickyHeader.tsx","components/FormElements/FormikSelect/FormikSelect.tsx","components/FormElements/FormikTextField/FormikTextField.tsx","constants/message.constants.ts","features/category/screens/admin/EditScreen/EditScreen.tsx","helpers/forms/handle-error-response.ts"],"sourcesContent":["import React, { FC, memo } from \"react\";\n\nimport { Box, Paper } from \"@mui/material\";\n\ninterface ContentWrapperProps {\n  children: React.ReactNode;\n}\n\nconst ContentWrapper: FC<ContentWrapperProps> = ({ children }) => {\n  return (\n    <Box\n      component={Paper}\n      sx={theme => ({\n        maxWidth: theme.breakpoints.values.md,\n        width: \"100%\",\n        mx: \"auto\",\n        px: 3,\n        py: 3,\n        my: 5,\n      })}\n      elevation={3}\n    >\n      {children}\n    </Box>\n  );\n};\n\nexport default memo(ContentWrapper);\n","import React, { FC, memo } from \"react\";\n\nimport { Box, Paper, Button } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\ninterface StickyHeaderProps {\n  linkBack: string;\n  isSubmitting: boolean;\n}\n\nconst StickyHeader: FC<StickyHeaderProps> = ({ linkBack, isSubmitting }) => {\n  const { t } = useTranslation();\n\n  return (\n    <Box\n      component={Paper}\n      elevation={3}\n      sx={{ px: 2, position: \"sticky\", top: 0, zIndex: 9 }}\n    >\n      <Box\n        sx={theme => ({\n          maxWidth: theme.breakpoints.values.md,\n          width: \"100%\",\n          mx: \"auto\",\n          py: 1.25,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n        })}\n      >\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          component={Link}\n          to={linkBack}\n        >\n          {t(\"button.Back\", { ns: \"admin\" })}\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          disabled={isSubmitting}\n        >\n          {t(\"button.Save changes\", { ns: \"admin\" })}\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default memo(StickyHeader);\n","import React, { FC, memo } from \"react\";\n\nimport {\n  FormControl,\n  FormHelperText,\n  MenuItem,\n  Select,\n  SelectProps,\n  Typography,\n} from \"@mui/material\";\nimport { Field, useFormikContext } from \"formik\";\nimport { get } from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\n\nexport interface OptionProps {\n  value: string | number;\n  label: string;\n}\n\ninterface FormikSelectProps extends Omit<SelectProps, \"name\"> {\n  name: string;\n  options: OptionProps[];\n  ns?: string;\n}\n\nconst FormikSelect: FC<FormikSelectProps> = ({\n  fullWidth,\n  label,\n  id,\n  name,\n  displayEmpty = true,\n  variant = \"filled\",\n  options,\n  ns = \"admin\",\n  ...props\n}) => {\n  const { t } = useTranslation();\n\n  const { errors, touched, values, handleChange } = useFormikContext<unknown>();\n\n  const error = get(errors, name) && get(touched, name);\n  const errorText = get(errors, name);\n\n  return (\n    <FormControl sx={{ minWidth: 120 }} fullWidth={fullWidth}>\n      {label && (\n        <Typography sx={{ mb: 1, fontWeight: \"fontWeightMedium\" }}>\n          <label htmlFor={`label-${id || name}`}>\n            {t(`label.${label}`, { ns })}\n          </label>\n        </Typography>\n      )}\n      <Field\n        {...props}\n        label=\"\"\n        hiddenLabel\n        displayEmpty={displayEmpty}\n        labelId={`label-${id || name}`}\n        component={Select}\n        onChange={handleChange}\n        id={id || name}\n        name={name}\n        variant={variant}\n        error={!!error}\n        value={get(values, name)}\n        inputProps={{\n          name,\n        }}\n      >\n        <MenuItem value=\"\">\n          <em>{t(`${\"common.None\"}`, { ns })}</em>\n        </MenuItem>\n        {options.map(option => (\n          <MenuItem key={option.value} value={option.value}>\n            {option.label}\n          </MenuItem>\n        ))}\n      </Field>\n      {errorText && <FormHelperText error>{errorText}</FormHelperText>}\n    </FormControl>\n  );\n};\n\nexport default memo(FormikSelect);\n","import React, { FC, memo } from \"react\";\n\nimport { TextField, TextFieldProps, Typography } from \"@mui/material\";\nimport { Field, useFormikContext } from \"formik\";\nimport { get } from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface FormikTextFieldProps extends Omit<TextFieldProps, \"name\"> {\n  name: string;\n  ns?: string;\n}\n\nconst FormikTextField: FC<FormikTextFieldProps> = ({\n  label,\n  id,\n  name,\n  variant = \"filled\",\n  ns = \"admin\",\n  placeholder,\n  ...props\n}) => {\n  const { t } = useTranslation();\n\n  const { errors, touched, values, handleBlur, handleChange } =\n    useFormikContext<unknown>();\n\n  const error = get(errors, name) && get(touched, name);\n  const errorText = get(errors, name);\n\n  return (\n    <>\n      {label && (\n        <Typography sx={{ mb: 1, fontWeight: \"fontWeightMedium\" }}>\n          <label htmlFor={id || name}>{t(`label.${label}`, { ns })}</label>\n        </Typography>\n      )}\n      <Field\n        {...props}\n        component={TextField}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        id={id || name}\n        name={name}\n        variant={variant}\n        error={!!error}\n        helperText={error && t(errorText, { ns })}\n        value={get(values, name)}\n        autoComplete=\"off\"\n        hiddenLabel\n        label=\"\"\n        placeholder={placeholder ? t(`placeholder.${placeholder}`, { ns }) : \"\"}\n      />\n    </>\n  );\n};\n\nexport default memo(FormikTextField);\n","export enum MessagesEnum {\n  CREATE_SUCCESS = \"Created success\",\n  DELETE_SUCCESS = \"Deleted success\",\n  UPDATE_SUCCESS = \"Updated success\",\n  ERROR = \"Something error\",\n  ADD_PRODUCT_SUCCESS = \"Add product success\",\n  OVER_PRODUCT_IN_CART = \"Over product\",\n}\n","import React, { FC, useEffect, useState, useMemo } from \"react\";\n\nimport { Box } from \"@mui/material\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { Formik, Form, FormikHelpers } from \"formik\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport ContentWrapper from \"components/EditComponents/ContentWrapper\";\nimport StickyHeader from \"components/EditComponents/StickyHeader\";\nimport FormikSelect from \"components/FormElements/FormikSelect/FormikSelect\";\nimport FormikTextField from \"components/FormElements/FormikTextField/FormikTextField\";\nimport Loader from \"components/Loader/Loader\";\nimport { MessagesEnum } from \"constants/message.constants\";\nimport {\n  CATEGORY_OPTIONS,\n  CategoryPathsEnum,\n  editSchema,\n  editInitialValues,\n  convertResponseToFormData,\n  postCategory,\n  getCategoryDetail,\n  putCategory,\n  CategoryRequest,\n} from \"features/category/category\";\nimport { handleErrorResponse } from \"helpers/forms/handle-error-response\";\nimport { displaySnackbar } from \"redux/snackbar.slice\";\nimport { useAppDispatch, useAppSelector } from \"redux/store\";\n\nconst EditScreen: FC = () => {\n  const history = useHistory();\n  const { categoryId } = useParams<{ categoryId: string }>();\n\n  const dispatch = useAppDispatch();\n  const { categoryDetail } = useAppSelector(state => state.category);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const initialValues = useMemo(() => {\n    if (categoryId && categoryDetail) {\n      return convertResponseToFormData(categoryDetail);\n    }\n    return editInitialValues;\n  }, [categoryDetail, categoryId]);\n\n  const handleSubmit = (\n    values: CategoryRequest,\n    { setSubmitting }: FormikHelpers<CategoryRequest>\n  ) => {\n    const action = categoryId\n      ? dispatch(\n          putCategory({\n            data: values,\n            categoryId: Number(categoryId),\n          })\n        )\n      : dispatch(postCategory(values));\n\n    action\n      .then(unwrapResult)\n      .then(() => {\n        dispatch(\n          displaySnackbar({\n            message: categoryId\n              ? MessagesEnum.UPDATE_SUCCESS\n              : MessagesEnum.CREATE_SUCCESS,\n          })\n        );\n        history.push(CategoryPathsEnum.LIST);\n      })\n      .catch(() => handleErrorResponse({ dispatch }))\n      .finally(() => setSubmitting(false));\n  };\n\n  useEffect(() => {\n    if (categoryId) {\n      dispatch(getCategoryDetail(Number(categoryId))).finally(() =>\n        setIsLoading(false)\n      );\n    } else {\n      setIsLoading(false);\n    }\n  }, [dispatch, categoryId]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={editSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <StickyHeader\n            linkBack={CategoryPathsEnum.LIST}\n            isSubmitting={isSubmitting}\n          />\n\n          <ContentWrapper>\n            <Box sx={{ mb: 3 }}>\n              <FormikTextField\n                name=\"title\"\n                label=\"Title\"\n                placeholder=\"example\"\n                fullWidth\n              />\n            </Box>\n\n            <Box sx={{ mb: 3 }}>\n              <FormikSelect\n                name=\"type\"\n                label=\"Type\"\n                options={CATEGORY_OPTIONS}\n                fullWidth\n              />\n            </Box>\n\n            <FormikTextField\n              name=\"description\"\n              label=\"Description\"\n              placeholder=\"example\"\n              multiline\n              fullWidth\n              rows={5}\n            />\n          </ContentWrapper>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default EditScreen;\n","import { MessagesEnum } from \"constants/message.constants\";\nimport { displaySnackbar } from \"redux/snackbar.slice\";\nimport { AppDispatch } from \"redux/store\";\n\nexport const handleErrorResponse = ({\n  dispatch,\n}: {\n  dispatch: AppDispatch;\n}) => {\n  dispatch(\n    displaySnackbar({\n      message: MessagesEnum.ERROR,\n    })\n  );\n};\n"],"names":["ContentWrapper","children","component","Paper","sx","theme","maxWidth","breakpoints","values","md","width","mx","px","py","my","elevation","memo","StickyHeader","linkBack","isSubmitting","t","useTranslation","position","top","zIndex","display","justifyContent","variant","color","Link","to","ns","type","disabled","FormikSelect","fullWidth","label","id","name","displayEmpty","options","props","useFormikContext","errors","touched","handleChange","error","get","errorText","minWidth","mb","fontWeight","htmlFor","hiddenLabel","labelId","Select","onChange","value","inputProps","map","option","FormikTextField","placeholder","handleBlur","TextField","onBlur","helperText","autoComplete","MessagesEnum","history","useHistory","categoryId","useParams","dispatch","useAppDispatch","categoryDetail","useAppSelector","state","category","useState","isLoading","setIsLoading","initialValues","useMemo","convertResponseToFormData","editInitialValues","useEffect","getCategoryDetail","Number","finally","validationSchema","editSchema","onSubmit","setSubmitting","putCategory","data","postCategory","then","unwrapResult","displaySnackbar","message","push","CategoryPathsEnum","catch","handleErrorResponse","CATEGORY_OPTIONS","multiline","rows"],"sourceRoot":""}